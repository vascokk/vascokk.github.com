<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Reinventing The Wheel]]></title>
  <link href="http://vascokk.github.com/atom.xml" rel="self"/>
  <link href="http://vascokk.github.com/"/>
  <updated>2013-03-23T22:27:29+00:00</updated>
  <id>http://vascokk.github.com/</id>
  <author>
    <name><![CDATA[Vasco Kolarov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machine Learning in Erlang and CUDA]]></title>
    <link href="http://vascokk.github.com/blog/2013/03/23/machine-learning-in-erlang-and-cuda/"/>
    <updated>2013-03-23T18:49:00+00:00</updated>
    <id>http://vascokk.github.com/blog/2013/03/23/machine-learning-in-erlang-and-cuda</id>
    <content type="html"><![CDATA[<p>Since I finished the &#8220;Machine Learning&#8221; course on Coursera, I wanted to try it in Erlang, Unfortunately Erlang is notorious with its inability to do intensive math calculations. In short - no matrix calculations - no Machine learning. Solution - use C and call C-functions from Erlang. Or better - use the GPU (in C) and call the functions from Erlang. I guess, this approach is no more qualified as &#8220;pure Erlang&#8221; one, but that is the best we can get. In fact - most of the Python ML libraries, so famous in the ML society, are using NumPy library, which guess what - is written in C (at least - the important part of it).</p>

<p>So, first thing to do was - google &#8220;erlang matrix operations cuda gpu&#8221;&#8230;.Almost nothing. Actually, I found two projects - OpenCL bindings for erlang <a href="https://github.com/tonyrog/cl">https://github.com/tonyrog/cl</a> and Kevin Smith&#8217;s <a href="https://github.com/kevsmith/pteracuda">Pteracuda</a>. I liked the Kevin&#8217;s approach, as using the Thrust library would hide the pure C boilerplate CUDA code. Also some algorithms are one-liners implemented with Thrust.</p>

<p>I forked Pteracuda and added matrix operations (CUBLAS-based), but since it had some parts that I didn&#8217;t need (like: strings, search, min/max), I decided to create another project and so - the <a href="https://github.com/vascokk/NumEr">NumEr</a> was born :)</p>

<p>Basically, it is a bunch of Erlang NIF functions for BLAS operations on vectors and matrices. Both are natively implemented as Thrust host/device vectors and special &#8220;buffer&#8221; classes are used to transfer them from Erlang to CUDA and back.</p>

<p>Here is an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% this is a row-major matrix:</span>
</span><span class='line'><span class="nv">A</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">]].</span>
</span><span class='line'>
</span><span class='line'><span class="c">%this is a vector:</span>
</span><span class='line'><span class="nv">X</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="c">% create a CUDA context and transfer to &quot;buffers&quot;</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_nifs</span><span class="p">:</span><span class="n">new_context</span><span class="p">().</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_A</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_nifs</span><span class="p">:</span><span class="n">new_matrix_float_buffer</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="no">?ROW_MAJOR</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_X</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_nifs</span><span class="p">:</span><span class="n">new_float_buffer</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">).</span>
</span><span class='line'><span class="nn">numer_nifs</span><span class="p">:</span><span class="n">write_buffer</span><span class="p">(</span><span class="nv">Buf_X</span><span class="p">,</span> <span class="nv">X</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see one of the parameters in the matrix buffer is &#8220;?ROW_MAJOR&#8221;. It is kinda borrowed from Boost library, but not yet fully implemented in NumEr. I mean - currently only row-major matrices are supported. However, under the hood in the Thrust vectors the numbers are stored in column-major format. I chose to do it in this way, because the CUBLAS library is using column-major storage - being a derivative of the FORTRAN BLAS library.</p>

<p>There are several modules, which are wrappers of the NIF functions like: numer_blas.erl - for BLAS operations, numer_buffer.erl - for operations on buffers (new, delete, read, write), etc.</p>

<p>Using numer_buffer module, the above example will look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_context</span><span class="p">:</span><span class="n">new</span><span class="p">().</span>
</span><span class='line'> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_A</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="n">row_major</span><span class="p">,</span> <span class="nv">A</span><span class="p">).</span>
</span><span class='line'> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_X</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="nb">float</span><span class="p">).</span>
</span><span class='line'> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">write</span><span class="p">(</span><span class="nv">Buf_X</span><span class="p">,</span> <span class="nv">X</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now, the more interesting part - calculations with vectors and matrices. Here is the BLAS GEMV example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%  GEMV: y &lt;- α op ( A ) x + β y</span>
</span><span class='line'><span class="nf">gemv_test</span><span class="p">()</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Ctx</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_context</span><span class="p">:</span><span class="n">new</span><span class="p">(),</span>
</span><span class='line'>    <span class="nv">A</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>    <span class="p">_</span><span class="n">m</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="c">%rows A</span>
</span><span class='line'>    <span class="p">_</span><span class="n">n</span> <span class="o">=</span> <span class="mi">4</span><span class="p">,</span> <span class="c">%columns A</span>
</span><span class='line'>    <span class="p">_</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="p">_</span><span class="n">beta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">X</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_A</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="n">row_major</span><span class="p">,</span> <span class="nv">A</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_X</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="nb">float</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">write</span><span class="p">(</span><span class="nv">Buf_X</span><span class="p">,</span> <span class="nv">X</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Buf_Y</span><span class="p">}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">new</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="nb">float</span><span class="p">),</span>
</span><span class='line'>    <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">write</span><span class="p">(</span><span class="nv">Buf_Y</span><span class="p">,</span> <span class="nv">Y</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">=</span> <span class="nn">numer_blas</span><span class="p">:</span><span class="n">gemv</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">,</span> <span class="n">no_transpose</span> <span class="p">,</span> <span class="p">_</span><span class="n">m</span><span class="p">,</span> <span class="p">_</span><span class="n">n</span><span class="p">,</span> <span class="p">_</span><span class="n">alpha</span><span class="p">,</span> <span class="nv">Buf_A</span><span class="p">,</span> <span class="nv">Buf_X</span><span class="p">,</span> <span class="p">_</span><span class="n">beta</span><span class="p">,</span> <span class="nv">Buf_Y</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">[</span><span class="mi">60</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">75</span><span class="p">.</span><span class="mi">0</span><span class="p">]}</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">read</span><span class="p">(</span><span class="nv">Buf_Y</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">destroy</span><span class="p">(</span><span class="nv">Buf_A</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">destroy</span><span class="p">(</span><span class="nv">Buf_X</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">=</span> <span class="nn">numer_buffer</span><span class="p">:</span><span class="n">destroy</span><span class="p">(</span><span class="nv">Buf_Y</span><span class="p">),</span>
</span><span class='line'>    <span class="n">ok</span> <span class="o">=</span> <span class="nn">numer_context</span><span class="p">:</span><span class="n">destroy</span><span class="p">(</span><span class="nv">Ctx</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the ML part of the whole exercise - there is an implementation of the Logistic Regression (without regularization) algorithm. Take a look at the numer_logreg.erl module.</p>

<p>The numer_ml.erl module contains an all-native implementation of Logistic Regression and numer_logreg.erl - implementation using buffers and NIFs. The first one I used to compare the speed between native and &#8220;Erlang&#8221; implementations.</p>

<p>Since using buffer operation can make the implementation awkward, there is also a helper module - numer_helpers.erl, wich can be used for prototyping the algorithms. WARNING - it is extremely slow and suitable ONLY for prototyping. Here is how you can use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">gemv_2_test</span><span class="p">()</span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">A</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">4</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">],[</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">9</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">.</span><span class="mi">0</span><span class="p">]],</span>
</span><span class='line'>    <span class="p">_</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="p">_</span><span class="n">beta</span> <span class="o">=</span> <span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">X</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">.</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>    <span class="nv">Res</span> <span class="o">=</span> <span class="nn">numer_helpers</span><span class="p">:</span><span class="n">gemv</span><span class="p">(</span><span class="n">no_transpose</span> <span class="p">,</span> <span class="p">_</span><span class="n">alpha</span><span class="p">,</span> <span class="nv">A</span><span class="p">,</span> <span class="nv">X</span><span class="p">,</span> <span class="p">_</span><span class="n">beta</span><span class="p">,</span> <span class="p">[]),</span>
</span><span class='line'>    <span class="no">?assertEqual</span><span class="p">([</span><span class="mi">60</span><span class="p">.</span><span class="mi">0</span><span class="p">,</span><span class="mi">75</span><span class="p">.</span><span class="mi">0</span><span class="p">],</span> <span class="nv">Res</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is much more readable and useful for one-time calculations, but in the ML &#8220;training&#8221; stage (with hundreds of iterations) it will be unusable, due to the multiple buffer creations and transfers.</p>

<p>The project is still a work in progress and needs a lot of polishing. So, if anyone is willing to give a hand I&#8217;ll be more than happy. Any suggestions to improve the framework are also very welcome.</p>

<p>That&#8217;s all folks! Happy hacking! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang: How to create and compile module in run-time]]></title>
    <link href="http://vascokk.github.com/blog/2013/03/23/erlang-how-to-create-and-compile-module-in-run-time/"/>
    <updated>2013-03-23T15:40:00+00:00</updated>
    <id>http://vascokk.github.com/blog/2013/03/23/erlang-how-to-create-and-compile-module-in-run-time</id>
    <content type="html"><![CDATA[<p>This is a very basic how-to, just to get you started with the topic and demonstrate that it is not so scary as you might think in the beginning.</p>

<p>Goal: Define and compile an Erlang module in run-time.</p>

<p>Let say we want to create the following module dynamically:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">div_test</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">divide</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">divide</span><span class="p">(</span><span class="nv">A</span><span class="p">,</span><span class="nv">B</span><span class="p">)</span> <span class="k">when</span> <span class="nv">B</span> <span class="o">=/=</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">A</span><span class="o">/</span><span class="nv">B</span><span class="p">;</span>
</span><span class='line'><span class="nf">divide</span><span class="p">(_,_)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">division_by_zero</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This is really simple module, just to illustrate the approach.</p>

<p>We are going to use the erl_syntax module, which provides facilities to create Erlang source code in form of Abstract Syntax Trees.
Let&#8217;s first take a look at our simple module. Here we have:</p>

<ol>
<li>Module declaration where the name of the module is an Erlang atom (div_test).</li>
<li>Export clause with a list of arity qualifiers. In our case - only one qualifier, which contains an atom (function name) and an integer (arity)</li>
<li>Function &#8220;divide&#8221; (again the name is an atom) and two function clauses</li>
</ol>


<p>3.1. First clause contains:</p>

<pre><code>- two variables A and B
- a guard, which is an infix operation ("=/=") between the variable B and the integer 0.
- a body, which is an infix operation ("/") between two variables A and B
</code></pre>

<p>3.2. Second clause contains:</p>

<pre><code>- two anonymous variables ("_,_")
- a body, which is a tuple of two atoms - "error" and "division_by_zero"
</code></pre>

<p>Now, we are going to create each of the above, using the functions provided by erl_syntax module:</p>

<ol>
<li>&#8220;module&#8221; attribute:</li>
</ol>


<p>&#8220;-module(div_test)&#8221; is a module attribute with argument - the name of the module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Module</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">attribute</span><span class="p">(</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">module</span><span class="p">),[</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">div_test</span><span class="p">)]).</span>
</span><span class='line'><span class="nv">ModForm</span> <span class="o">=</span>  <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">revert</span><span class="p">(</span><span class="nv">Module</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make the Module AST compatible with the erl_parse trees, which are used by the &#8220;compile&#8221; module (i.e. make a &#8220;Form&#8221; out of the AST), we have to invoke revert().</p>

<ol>
<li>&#8220;export&#8221; attribute:</li>
</ol>


<p>It is a bit tricky&#8230; I would happily use just the line: ExportForm = {attribute,2,export,[{divide,2}]}, but for the sake of completeness, let&#8217;s go deeper:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Export</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">attribute</span><span class="p">(</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">export</span><span class="p">),[</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">list</span><span class="p">([</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">arity_qualifier</span><span class="p">(</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">divide</span><span class="p">),</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">integer</span><span class="p">(</span><span class="mi">2</span><span class="p">))])]).</span>
</span><span class='line'><span class="nv">ExportForm</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">revert</span><span class="p">(</span><span class="nv">Export</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scary at a first sight, isn&#8217;t it? In fact, it is quite straightforward:</p>

<p>First we are going to create an attribute. The attribute() function has two parameters - name of the attribute (which is an atom - &#8220;export&#8221;) and a list of arguments. In this case the list of arguments has only one element, which is again - a list, containing arity qualifiers (pairs &#8220;name/arity&#8221;) of the exported functions. So we have a call to attribute(atom, [Arguments]), where Arguments is &#8220;list([arity_qualifieris])&#8221;. The arity qualifier is an atom and an integer.</p>

<ol>
<li>Function:</li>
</ol>


<p>If you grapsed the above, the function definition will be quite easy to understand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">% define the input variables</span>
</span><span class='line'><span class="nv">Var1</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">variable</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">).</span>
</span><span class='line'><span class="nv">Var2</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">variable</span><span class="p">(</span><span class="s">&quot;B&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the Guard</span>
</span><span class='line'><span class="nv">Guard1</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">infix_expr</span><span class="p">(</span><span class="nv">Var1</span><span class="p">,</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">operator</span><span class="p">(</span><span class="s">&quot;=/=&quot;</span><span class="p">),</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">integer</span><span class="p">(</span><span class="mi">0</span><span class="p">)).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the function body</span>
</span><span class='line'><span class="nv">Body1</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">infix_expr</span><span class="p">(</span><span class="nv">Var1</span><span class="p">,</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">operator</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">),</span> <span class="nv">Var2</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the first clause</span>
</span><span class='line'><span class="nv">Clause1</span> <span class="o">=</span>  <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">clause</span><span class="p">([</span><span class="nv">Var1</span><span class="p">,</span><span class="nv">Var2</span><span class="p">],[</span><span class="nv">Guard1</span><span class="p">],[</span><span class="nv">Body1</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the anonymous variable</span>
</span><span class='line'><span class="nv">Var3</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">variable</span><span class="p">(</span><span class="s">&quot;_&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the body of the second clause</span>
</span><span class='line'><span class="nv">Body2</span> <span class="o">=</span>  <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">tuple</span><span class="p">([</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">error</span><span class="p">),</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">divsion_by_zero</span><span class="p">)]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the second clause</span>
</span><span class='line'><span class="nv">Clause2</span> <span class="o">=</span>  <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">clause</span><span class="p">([</span><span class="nv">Var3</span><span class="p">,</span> <span class="nv">Var3</span><span class="p">],[],[</span><span class="nv">Body2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% define the function</span>
</span><span class='line'><span class="nv">Function</span> <span class="o">=</span>  <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">function</span><span class="p">(</span><span class="nn">erl_syntax</span><span class="p">:</span><span class="n">atom</span><span class="p">(</span><span class="n">divide</span><span class="p">),[</span><span class="nv">Clause1</span><span class="p">,</span><span class="nv">Clause2</span><span class="p">]).</span>
</span><span class='line'><span class="nv">FunctionForm</span> <span class="o">=</span> <span class="nn">erl_syntax</span><span class="p">:</span><span class="n">revert</span><span class="p">(</span><span class="nv">Function</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to compile the module, load the binary and test:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="mi">15</span><span class="o">&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Mod</span><span class="p">,</span> <span class="nv">Bin1</span><span class="p">}</span> <span class="o">=</span> <span class="nn">compile</span><span class="p">:</span><span class="n">forms</span><span class="p">([</span><span class="nv">ModForm</span><span class="p">,</span><span class="nv">ExportForm</span><span class="p">,</span> <span class="nv">FunctionForm</span><span class="p">]).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">div_test</span><span class="p">,</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="mi">70</span><span class="p">,</span><span class="mi">79</span><span class="p">,</span><span class="mi">82</span><span class="p">,</span><span class="mi">49</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">69</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">77</span><span class="p">,</span><span class="mi">65</span><span class="p">,</span><span class="mi">116</span><span class="p">,</span><span class="mi">111</span><span class="p">,</span><span class="mi">109</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">55</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">100</span><span class="p">,...</span><span class="o">&gt;&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">16</span><span class="o">&gt;</span> <span class="nn">code</span><span class="p">:</span><span class="n">load_binary</span><span class="p">(</span><span class="nv">Mod</span><span class="p">,</span> <span class="p">[],</span> <span class="nv">Bin1</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">module</span><span class="p">,</span><span class="n">div_test</span><span class="p">}</span>
</span><span class='line'><span class="mi">17</span><span class="o">&gt;</span> <span class="nn">div_test</span><span class="p">:</span><span class="n">divide</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">).</span>
</span><span class='line'><span class="mi">2</span><span class="p">.</span><span class="mi">0</span>
</span><span class='line'><span class="mi">18</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all folks! Happy hacking! :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Real Time Server - Part 3 - Putting Parts Together]]></title>
    <link href="http://vascokk.github.com/blog/2012/07/15/erlang-real-time-server-part-3-putting-them-together/"/>
    <updated>2012-07-15T17:16:00+01:00</updated>
    <id>http://vascokk.github.com/blog/2012/07/15/erlang-real-time-server-part-3-putting-them-together</id>
    <content type="html"><![CDATA[<h2>The need for load-balancing</h2>

<p>As you have probably noticed in <a href="http://vas.io/blog/2012/06/06/erlang-real-time-server-part-2-aggregation/">Part 2</a> we always send the Riak commands to one and the same node. That doesn&#8217;t seem to be right, so, what about some load balanced distibution of the commands among the cluster nodes? There are at least two ways to solve this:</p>

<ul>
<li>send commands from Diameter Server to Riak cluster in load-balanced fashion, or:</li>
<li>couple Diameter server with  RiakCore application in one node and send Diameter messages directly to the RiakCluster in a load-balanced fashion.</li>
</ul>


<p>If we choose the first approach, we can use HTTP or ProtocolBuffer interface to access Riak from <em>diaserver</em> and use some HTTP/TCP proxy to load-balance the requests (e.g. HAProxy is a good one). The inconvenience here comes from the fact that we have to write a separate HTTP POST requests or implement a PB interface for every Diameter command. (But, this is probably a good idea for a future blog post)</p>

<p>In the second case we can use a Diameter Relay/Forward agent to distribute Diameter messages among the cluster or (again) a TCP proxy, since one of the possible Diameter transports is TCP. For the sake of simplicity I&#8217;ll use this approach.</p>

<p>First of all, as our applications will be running on the same Riak cluster, I&#8217;ll change the <em>diaserver</em> callback module. At the moment this module is responsible for creating the Diameter Accounting Answer message. Instead, I&#8217;ll just make a call to aggregation:accounting() function with parameter - the Diameter Accounting Request.</p>

<p>Change the <em>accounting()</em> function in <em>aggregation.erl</em> module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">accounting</span><span class="p">(</span><span class="nv">Req</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">DocIdx</span> <span class="o">=</span> <span class="nn">riak_core_util</span><span class="p">:</span><span class="n">chash_key</span><span class="p">({</span><span class="o">&lt;&lt;</span><span class="s">&quot;accounting&quot;</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="nb">term_to_binary</span><span class="p">(</span><span class="n">now</span><span class="p">())}),</span>
</span><span class='line'>    <span class="nv">PrefList</span> <span class="o">=</span> <span class="nn">riak_core_apl</span><span class="p">:</span><span class="n">get_primary_apl</span><span class="p">(</span><span class="nv">DocIdx</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">aggregation</span><span class="p">),</span>
</span><span class='line'>    <span class="p">[{</span><span class="nv">IndexNode</span><span class="p">,</span> <span class="p">_</span><span class="nv">Type</span><span class="p">}]</span> <span class="o">=</span> <span class="nv">PrefList</span><span class="p">,</span>
</span><span class='line'>    <span class="nn">riak_core_vnode_master</span><span class="p">:</span><span class="n">sync_spawn_command</span><span class="p">(</span><span class="nv">IndexNode</span><span class="p">,</span> <span class="p">{</span><span class="n">accounting</span><span class="p">,</span> <span class="nv">Req</span><span class="p">},</span> <span class="n">aggregation_vnode_master</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to change also the arity in the export clause to /1.</p>

<p>Next, the handle_call() in the aggregation_vnode module:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle_command</span><span class="p">({</span><span class="n">accounting</span><span class="p">,</span> <span class="nv">Req</span><span class="p">},</span> <span class="p">_</span><span class="nv">Sender</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c">%%TODO Process accounting request</span>
</span><span class='line'>    <span class="nv">Req</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">ResponseCode</span> <span class="o">=</span> <span class="no">?&#39;DIAMETER_BASE_RESULT-CODE_DIAMETER_SUCCESS&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">ResponseCode</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the sake of the exercise, we are just going to return SUCCESS, but actually this is the place where you should do all the processing of the Diameter request.</p>

<p>The last step is to call aggregation:accounting(Req) from the diameter callback module:</p>

<figure class='code'><figcaption><span>server_cb.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle_request</span><span class="p">(</span><span class="nl">#diameter_packet</span><span class="p">{</span><span class="n">msg</span> <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="p">[]},</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{_,</span> <span class="nv">Caps</span><span class="p">})</span>
</span><span class='line'>                  <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="n">diameter_base_ACR</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nl">#diameter_caps</span><span class="p">{</span><span class="n">origin_host</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OH</span><span class="p">,_},</span>
</span><span class='line'>                   <span class="n">origin_realm</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OR</span><span class="p">,_}}</span>
</span><span class='line'>            <span class="o">=</span> <span class="nv">Caps</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nl">#diameter_base_ACR</span><span class="p">{</span><span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                       <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">&#39;Acct-Application-Id&#39;</span> <span class="o">=</span> <span class="nv">AccAppId</span> <span class="p">}</span>
</span><span class='line'>            <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">ResultCode</span> <span class="o">=</span> <span class="nn">aggregation</span><span class="p">:</span><span class="n">accounting</span><span class="p">(</span><span class="nv">Req</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">Ans</span> <span class="o">=</span> <span class="nl">#diameter_base_ACA</span><span class="p">{</span><span class="n">&#39;Result-Code&#39;</span> <span class="o">=</span> <span class="nv">ResultCode</span><span class="p">,</span> <span class="c">%%?&#39;DIAMETER_BASE_RESULT-CODE_DIAMETER_SUCCESS&#39;,</span>
</span><span class='line'>                       <span class="n">&#39;Origin-Host&#39;</span> <span class="o">=</span> <span class="nv">OH</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">&#39;Origin-Realm&#39;</span> <span class="o">=</span> <span class="nv">OR</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span><span class="p">,</span>
</span><span class='line'>                           <span class="n">&#39;Acct-Application-Id&#39;</span> <span class="o">=</span> <span class="nv">AccAppId</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, what is left is - to put <em>diaserver</em> and <em>aggregation</em> applications together in one erlang &#8220;release&#8221;:</p>

<h2>Building the &#8220;RTS&#8221; node</h2>

<p>I&#8217;m going to the same as I did in the previous post - using the rebar-riak-core templates, but this time I&#8217;ll use a slightly modified <a href="https://github.com/vascokk/rebar_riak_core/blob/master/riak_core_multinode_simple.template">&#8220;multinode template&#8221;</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>rel
</span><span class='line'><span class="nv">$ </span>mkdir rts
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>rts
</span><span class='line'><span class="nv">$ </span>../../rebar -f create <span class="nv">template</span><span class="o">=</span>riak_core_multinode_simple <span class="nv">nodeid</span><span class="o">=</span>rts <span class="nv">target_dir</span><span class="o">=</span>.
</span><span class='line'>
</span><span class='line'><span class="o">==</span>&gt; rts <span class="o">(</span>create<span class="o">)</span>
</span><span class='line'>Writing ./reltool.config
</span><span class='line'>Writing ./files/erl
</span><span class='line'>Writing ./files/nodetool
</span><span class='line'>Writing ./files/rts
</span><span class='line'>Writing ./files/app.config
</span><span class='line'>Writing ./files/vm.args
</span><span class='line'>Writing .gitignore
</span><span class='line'>Writing Makefile
</span><span class='line'>Writing ./files/rts-admin
</span><span class='line'>Writing ./vars.config
</span><span class='line'>Writing ./vars/dev1.config
</span><span class='line'>Writing ./vars/dev2.config
</span><span class='line'>Writing ./vars/dev3.config
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now, we have to edit <em>reltool.config</em> and <em>app.config</em>:</p>

<p>For <em>reltool.config</em> we need to:</p>

<ul>
<li>change lib_dirs with appropriate paths</li>
<li>add <em>diaserver</em> and <em>aggregation</em> to the list of application need to be started by this release</li>
<li>add application specific configuration</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>sys, <span class="o">[</span>    
</span><span class='line'>       <span class="o">{</span>lib_dirs, <span class="o">[</span><span class="s2">&quot;../../apps/&quot;</span>, <span class="s2">&quot;../../deps/&quot;</span><span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>rel, <span class="s2">&quot;rts&quot;</span>, <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>         kernel,
</span><span class='line'>         stdlib,
</span><span class='line'>         sasl,
</span><span class='line'>         %% add our applications
</span><span class='line'>         aggregation,
</span><span class='line'>         diaserver
</span><span class='line'>        <span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>rel, <span class="s2">&quot;start_clean&quot;</span>, <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>         kernel,
</span><span class='line'>         stdlib
</span><span class='line'>        <span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>boot_rel, <span class="s2">&quot;rts&quot;</span><span class="o">}</span>,
</span><span class='line'>       <span class="o">{</span>profile, embedded<span class="o">}</span>,
</span><span class='line'>       <span class="o">{</span>excl_sys_filters, <span class="o">[</span><span class="s2">&quot;^bin/.*&quot;</span>,
</span><span class='line'>                           <span class="s2">&quot;^erts.*/bin/(dialyzer|typer)&quot;</span><span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>app, sasl, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>,
</span><span class='line'>       %%add application specific configurations
</span><span class='line'>       <span class="o">{</span>app, aggregation, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>,
</span><span class='line'>       <span class="o">{</span>app, diaserver, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>
</span><span class='line'>      <span class="o">]}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>target_dir, <span class="s2">&quot;rts&quot;</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>overlay_vars, <span class="s2">&quot;vars.config&quot;</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>overlay, <span class="o">[</span>
</span><span class='line'>           <span class="o">{</span>mkdir, <span class="s2">&quot;data/ring&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>mkdir, <span class="s2">&quot;log/sasl&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/erl&quot;</span>, <span class="s2">&quot;\{\{erts_vsn\}\}/bin/erl&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/nodetool&quot;</span>, <span class="s2">&quot;\{\{erts_vsn\}\}/bin/nodetool&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>template, <span class="s2">&quot;files/app.config&quot;</span>, <span class="s2">&quot;etc/app.config&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>template, <span class="s2">&quot;files/vm.args&quot;</span>, <span class="s2">&quot;etc/vm.args&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>template, <span class="s2">&quot;files/rts&quot;</span>, <span class="s2">&quot;bin/rts&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>template, <span class="s2">&quot;files/rts-admin&quot;</span>, <span class="s2">&quot;bin/rts-admin&quot;</span><span class="o">}</span>
</span><span class='line'>           <span class="o">]}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>For the <em>app.config</em> we need to configure the TCP port on which diaserver will listen.</p>

<div><script src='https://gist.github.com/3146816.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I only added the last <em>diaserver</em> tuple. As you see the  is a template parameter. It will be substituted with the value specific for each &#8220;dev&#8221; node. For this purpose we have 3 &#8220;dev&#8221; configuration files in the <em>dev</em> directory. Here is the content of the first one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%%
</span><span class='line'>%% etc/app.config
</span><span class='line'>%%
</span><span class='line'><span class="o">{</span>ring_state_dir,        <span class="s2">&quot;data/ring&quot;</span><span class="o">}</span>.
</span><span class='line'><span class="o">{</span>web_ip,                <span class="s2">&quot;127.0.0.1&quot;</span><span class="o">}</span>.
</span><span class='line'><span class="o">{</span>web_port,              <span class="s2">&quot;8091&quot;</span><span class="o">}</span>.
</span><span class='line'><span class="o">{</span>handoff_port,          <span class="s2">&quot;8101&quot;</span><span class="o">}</span>.
</span><span class='line'><span class="o">{</span>diameter_port,         <span class="s2">&quot;7071&quot;</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'>%%
</span><span class='line'>%% etc/vm.args
</span><span class='line'>%%
</span><span class='line'><span class="o">{</span>node,                  <span class="s2">&quot;rts1@127.0.0.1&quot;</span><span class="o">}</span>.
</span><span class='line'><span class="o">{</span>cookie,                <span class="s2">&quot;rts&quot;</span><span class="o">}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>In this case I put 7071 for Diameter port, for the other 2 nodes the ports will be 7072 and 7073. Using this &#8220;dev&#8221; configurations will allow us to run 3 (or more if we want) Riak nodes running both <em>aggregation</em> and <em>diaserver</em> applications on the same host.</p>

<p>Compile and build the development release:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;project_root&gt;<span class="nv">$ </span>make
</span><span class='line'>&lt;project_root&gt;<span class="nv">$ </span>make <span class="nv">devrel</span>
</span><span class='line'><span class="o">==</span>&gt; rts <span class="o">(</span>generate<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last thing - we need the  <em>rel/rts/files/rts-admin</em> script to join our Riak nodes once they are started. If you open this file you&#8217;ll notice that it calls &#8220;myapp_console&#8221; application, we have to change this to &#8220;aggregation_console&#8221; (see the <em>app/aggregation/src</em> directory).</p>

<p>And we are done with the RTS!</p>

<p>We can now run 3 nodes, each one listening for Diameter messages on a different port. As you remember, the initial idea was to distribute the messages to these nodes via TCP proxy, so let&#8217;s:</p>

<h2>Setup the HAProxy</h2>

<p>This part is relatively easy. First download and install the HAProxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://haproxy.1wt.eu/download/1.4/src/haproxy-1.4.20.tar.gz
</span><span class='line'>
</span><span class='line'>.....
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>tar -xzf haproxy-1.4.20.tar.gz
</span><span class='line'>
</span><span class='line'>.....
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>haproxy-1.4.20
</span><span class='line'><span class="nv">$ </span>make <span class="nv">TARGET</span><span class="o">=</span>linux26
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>The above <em>make</em> has the option <em>TARGET=linux26</em>, which might be different in your case. To determine the linux kernel version use &#8220;uname -r&#8221; command.</p>

<p>If the HAProxy installation is okay, create a configuration file. In our case it looks like this:</p>

<figure class='code'><figcaption><span>dev.haproxy.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>global
</span><span class='line'>  <span class="c"># specify the maximum connections across the board</span>
</span><span class='line'>  maxconn 2048
</span><span class='line'>  <span class="c"># enable debug output</span>
</span><span class='line'>  debug
</span><span class='line'>
</span><span class='line'><span class="c"># now set the default settings for each sub-section</span>
</span><span class='line'>defaults
</span><span class='line'>  <span class="c"># stick with http traffic</span>
</span><span class='line'>  mode http
</span><span class='line'>  <span class="c"># set the number of times HAProxy should attempt to</span>
</span><span class='line'>  <span class="c"># connect to the target</span>
</span><span class='line'>  retries 3
</span><span class='line'>  <span class="c"># specify the number of connections per front and</span>
</span><span class='line'>  <span class="c"># back end</span>
</span><span class='line'>  maxconn 1024
</span><span class='line'>  <span class="c"># specify some timeouts (all in milliseconds)</span>
</span><span class='line'>  timeout connect 5000
</span><span class='line'>
</span><span class='line'><span class="c">########### Riak Configuration ###################</span>
</span><span class='line'>
</span><span class='line'>frontend diaserver
</span><span class='line'>  mode tcp
</span><span class='line'>
</span><span class='line'>  <span class="c"># bind to default DIAMETER port 3868</span>
</span><span class='line'>  <span class="nb">bind </span>127.0.0.1:3868
</span><span class='line'>
</span><span class='line'>  <span class="c"># Default to the riak cluster configuration</span>
</span><span class='line'>  default_backend riak_cluster
</span><span class='line'>
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout client 1200000
</span><span class='line'>
</span><span class='line'><span class="c"># Here is the magic bit which load balances across</span>
</span><span class='line'><span class="c"># our instances of riak_core which are clustered</span>
</span><span class='line'><span class="c"># together</span>
</span><span class='line'>backend riak_cluster
</span><span class='line'>  mode tcp
</span><span class='line'>  balance roundrobin
</span><span class='line'>  <span class="c"># timeouts</span>
</span><span class='line'>  timeout server 1200000
</span><span class='line'>  timeout connect 3000
</span><span class='line'>
</span><span class='line'>  server rts1 127.0.0.1:7071 check
</span><span class='line'>  server rts2 127.0.0.1:7072 check
</span><span class='line'>  server rts3 127.0.0.1:7073 check
</span></code></pre></td></tr></table></div></figure>


<p>The idea here is pretty obvious (right?): our &#8220;frontend&#8221; (i.e. what the external world will see) is the standard Diameter port 3868. All the TCP packets sent to this port will be forwarded on a round-robin fashion to the &#8220;backend&#8221;, which is our 3 dev release erlang nodes, each of them listening to a different diameter port.</p>

<p>And that&#8217;s it! We only need to run everything and see how it works:</p>

<p>Open a terminal window and start the first node:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./rel/rts/dev/dev1/bin/rts console
</span><span class='line'>
</span><span class='line'>19:01:11.204 <span class="o">[</span>info<span class="o">]</span> Application crypto started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.208 <span class="o">[</span>info<span class="o">]</span> Application riak_sysmon started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.239 <span class="o">[</span>info<span class="o">]</span> Application inets started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.243 <span class="o">[</span>info<span class="o">]</span> Application mochiweb started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>** Found 0 name clashes in code paths
</span><span class='line'>19:01:11.277 <span class="o">[</span>info<span class="o">]</span> Application webmachine started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.311 <span class="o">[</span>info<span class="o">]</span> Application os_mon started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.322 <span class="o">[</span>info<span class="o">]</span> Application folsom started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.470 <span class="o">[</span>info<span class="o">]</span> New capability: <span class="o">{</span>riak_core,vnode_routing<span class="o">}</span> <span class="o">=</span> proxy
</span><span class='line'>19:01:11.471 <span class="o">[</span>info<span class="o">]</span> New capability: <span class="o">{</span>riak_core,staged_joins<span class="o">}</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'>19:01:11.473 <span class="o">[</span>info<span class="o">]</span> Application riak_core started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.509 <span class="o">[</span>info<span class="o">]</span> Waiting <span class="k">for </span>application aggregation to start <span class="o">(</span>0 seconds<span class="o">)</span>.
</span><span class='line'>19:01:11.515 <span class="o">[</span>info<span class="o">]</span> Application aggregation started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.568 <span class="o">[</span>info<span class="o">]</span> Application diameter started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>19:01:11.575 <span class="o">[</span>info<span class="o">]</span> Starting diameter on IP: <span class="o">{</span>127,0,0,1<span class="o">}</span>
</span><span class='line'>19:01:11.575 <span class="o">[</span>info<span class="o">]</span> Starting diameter on port: 7071
</span><span class='line'>19:01:11.611 <span class="o">[</span>info<span class="o">]</span> Wait <span class="nb">complete </span><span class="k">for </span>application aggregation <span class="o">(</span>0 seconds<span class="o">)</span>
</span><span class='line'>19:01:11.614 <span class="o">[</span>info<span class="o">]</span> Application diaserver started on node <span class="s1">&#39;rts1@127.0.0.1&#39;</span>
</span><span class='line'>Eshell V5.9.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'><span class="o">(</span>rts1@127.0.0.1<span class="o">)</span>1&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Open a new terminal and start the second node and join it to the first one::</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rel/rts/dev/dev2/bin/rts start
</span><span class='line'><span class="nv">$ </span>rel/rts/dev/dev2/bin/rts-admin join rts1@127.0.0.1
</span><span class='line'>Sent join request to rts1@127.0.0.1
</span><span class='line'>
</span><span class='line'>....on the first one you should get:
</span><span class='line'>
</span><span class='line'><span class="o">(</span>rts1@127.0.0.1<span class="o">)</span>1&gt; 20:13:44.622 <span class="o">[</span>info<span class="o">]</span> <span class="s1">&#39;rts2@127.0.0.1&#39;</span> joined cluster with status <span class="s1">&#39;valid&#39;</span>
</span><span class='line'>
</span><span class='line'>....attach to the second rts console:
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>rel/rts/dev/dev2/bin/rts attach
</span></code></pre></td></tr></table></div></figure>


<p>Now, run the HAProxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>sudo haproxy -f dev.haproxy.config -d
</span><span class='line'>Available polling systems :
</span><span class='line'>     sepoll : <span class="nv">pref</span><span class="o">=</span>400,  <span class="nb">test </span>result OK
</span><span class='line'>      epoll : <span class="nv">pref</span><span class="o">=</span>300,  <span class="nb">test </span>result OK
</span><span class='line'>       poll : <span class="nv">pref</span><span class="o">=</span>200,  <span class="nb">test </span>result OK
</span><span class='line'>     <span class="k">select</span> : <span class="nv">pref</span><span class="o">=</span>150,  <span class="nb">test </span>result OK
</span><span class='line'>Total: 4 <span class="o">(</span>4 usable<span class="o">)</span>, will use sepoll.
</span><span class='line'>Using sepoll<span class="o">()</span> as the polling mechanism.
</span><span class='line'><span class="o">[</span>WARNING<span class="o">]</span> 200/202744 <span class="o">(</span>10525<span class="o">)</span> : Server riak_cluster/rts3 is DOWN, reason: Layer4 connection problem, info: <span class="s2">&quot;Connection refused&quot;</span>, check duration: 0ms. 2 active and 0 backup servers left. 0 sessions active, 0 requeued, 0 remaining in queue.
</span></code></pre></td></tr></table></div></figure>


<p>Run another erlang shell and test with diameter client (see Part 2):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Eshell V5.9.1  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'>1&gt; diameter:start<span class="o">()</span>.
</span><span class='line'>ok
</span><span class='line'>2&gt; client:start<span class="o">()</span>.
</span><span class='line'>ok
</span><span class='line'>3&gt; client:connect<span class="o">(</span>tcp<span class="o">)</span>.
</span><span class='line'><span class="o">{</span>ok,#Ref&lt;0.0.0.50&gt;<span class="o">}</span>
</span><span class='line'>4&gt; client:call_ACR<span class="o">()</span>.
</span><span class='line'><span class="o">{</span>ok,<span class="o">{</span>diameter_base_ACA,<span class="s2">&quot;client;1404231385;1;nonode@nohost&quot;</span>,
</span><span class='line'>                       2001,<span class="s2">&quot;diameter_srv.example.com&quot;</span>,<span class="s2">&quot;example.com&quot;</span>,1,1,<span class="o">[]</span>,
</span><span class='line'>                       <span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]</span>,<span class="o">[]}}</span>
</span><span class='line'>5&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>....you should see the connection request accepted on the console running the HAProxy:
</span><span class='line'>
</span><span class='line'>00000000:diaserver.accept<span class="o">(</span>0004<span class="o">)=</span>0005 from <span class="o">[</span>127.0.0.1:33979<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you execute the client:call_ACR() several times, you should see the request going to the first or the second node. The balance policy is not really a round-robin, because we have another routing layer in RiacCore, which sends the requests to the appropriate Riak partition.</p>

<p>You can now create a release node (execute: <em>make rel</em>), deploy the node on several AWS instances and here we go - a real-time billing in the cloud :-) Well, of course,  we are not even close to this - we need to implement all the Diameter commands and we need a backend system to manage our subscribers and tariffs, but at least, we just built some foundations for a Riak-based AAA system.</p>

<p>Project files are available one GitHub in repository <a href="https://github.com/vascokk/diameter-test">diameter_test</a>. Happy hacking! :-)</p>

<h2>Credits</h2>

<ul>
<li>OJ Reeves for the HAProxy <a href="http://buffered.io/posts/webmachine-erlydtl-and-riak-part-2/">mini-tutorial</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Real Time Server - Part 2 - Aggregation]]></title>
    <link href="http://vascokk.github.com/blog/2012/06/06/erlang-real-time-server-part-2-aggregation/"/>
    <updated>2012-06-06T18:39:00+01:00</updated>
    <id>http://vascokk.github.com/blog/2012/06/06/erlang-real-time-server-part-2-aggregation</id>
    <content type="html"><![CDATA[<h2>High level overview of the RTS</h2>

<p>In a schematic view, the RTS will look like this:</p>

<p><img src="http://vascokk.github.com/images/rts-part-2/RTS1.png" alt="" /></p>

<p>The idea here is: As a result of Diameter request, command on Aggregation module will be invoked (e.g. &#8220;accounting()&#8221;). As the job, usually performed by this module is computationally intensive, the Aggregation will run on a Riak cluster and the command will be executed within this cluster.</p>

<h2>Setting up a Riak cluster (or  &#8220;A very lame introduction to Riak&#8221;)</h2>

<p>Setting up a cluster could be a tedious job. Fortunately, there are always some giant&#8217;s shoulders you can step on*. In this case I will use the Ryan Zezeski&#8217;s RiakCore rebar <a href="https://github.com/rzezeski/rebar_riak_core">templates</a></p>

<p>Once you clone the templates repository from GitHub, make a new Erlang application directory in <em>apps</em> and run <em>rebar</em> from it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;project_root&gt; <span class="nv">$ </span>./mkdir apps/aggregation
</span><span class='line'>&lt;project_root&gt; <span class="nv">$ </span><span class="nb">cd </span>apps/aggregation
</span><span class='line'>&lt;project_root&gt;/apps/aggregation <span class="nv">$ </span>../../rebar -f create <span class="nv">template</span><span class="o">=</span>riak_core_multinode <span class="nv">appid</span><span class="o">=</span>aggregation <span class="nv">nodeid</span><span class="o">=</span>aggregation
</span></code></pre></td></tr></table></div></figure>


<p>With this run correctly, you should have the following files in the application&#8217;s <em>src</em> directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>aggregation_app.erl
</span><span class='line'>aggregation.app.src
</span><span class='line'>aggregation_console.erl
</span><span class='line'>aggregation.erl
</span><span class='line'>aggregation.hrl
</span><span class='line'>aggregation_node_event_handler.erl
</span><span class='line'>aggregation_ring_event_handler.erl
</span><span class='line'>aggregation_sup.erl
</span><span class='line'>aggregation_vnode.erl
</span></code></pre></td></tr></table></div></figure>


<p>What you are looking at is an application, which will start the Riak&#8217;s working horse - the vnode. The vnode (&#8220;virtual node&#8221;) is the building block of the Riak cluster. Riak itself is heavily influenced by Amazon&#8217;s Dynamo paper - <a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">&#8220;Dynamo: Amazon’s Highly Available Key-value Store&#8221;</a>. It is worth reading, but if you are not in an &#8220;academic mood&#8221; right now, here are some highlights:</p>

<ul>
<li>Riak is a distributed, highly scalable, key-value store</li>
<li>Riak is usually deployed on a cluster (set of physical hosts called &#8220;nodes&#8221;)</li>
<li>each node runs a certain number of &#8220;virtual nodes&#8221; (or &#8220;vnodes&#8221;)</li>
<li>the vnode is responsible for a partition of the Riak &#8220;Ring&#8221;</li>
<li>the Ring is a circular, ordered, 160 bit integer space (i.e. integers from 0 to 2<sup>160</sup> placed in circle)</li>
<li>each element of the Ring represents a hash value computed of the key from a &#8220;key-value&#8221; pair (in fact it will be computed of the &#8220;bucket&#8221;+&#8221;key&#8221;, but this is not so important at the moment)</li>
<li>the number of partitions is always the same, whether you add a new node to the Cluster or take one off (i.e. a bit of a planning is needed upfront)</li>
<li>the vnode can be used to store data or to perform computations (executing commands)</li>
</ul>


<p>I&#8217;ll not go further into details, as <a href="http://wiki.basho.com">wiki.basho.com</a> is your best source of information, if you want to dive in. I&#8217;ll just outline the &#8220;scalability&#8221; thing and how Riak will make our life easier:</p>

<p>As you see in the second bullet from the bottom - the number of partitions is constant. It is set in the app.config&#8217;s ring_creation_size parameter. Default number is 64 and there is no formal way to calculate it. It would be more or less empirically set by the developer. According to the Riak&#8217;s wiki - for a mid-sized cluster of 8 to 16 nodes, the number should be between 128 and 512 partitions (always a power of 2), but this is definitely not &#8220;set on stone&#8221;. Let&#8217;s assume that we have set the optimal ring size already. At some point of time when the system is fully operational, we might need more computational power. Then, what we should do is:</p>

<ol>
<li>Deploy the application on a new node.</li>
<li>&#8220;join&#8221; (one-line command) the new one to a randomly chosen node from the cluster (you can really pick any member, there is no &#8220;master node&#8221;).</li>
<li>&#8230;.Wait&#8230;there is no 3rd&#8230; :)</li>
</ol>


<p>The new node will automatically claim a certain number of partitions, offloading the other nodes. Under the hood, Riak will use &#8220;handoff&#8221; procedures, &#8220;Gossip&#8221; protocol and other magics to do the job. What is important to us is that, due to the &#8220;consistent hashing&#8221; (more on this in some other article), the relocation of the vnodes will be transparent to the application(s) using the Riak cluster, as all the hash values are still on the same vnodes, even though, some of the vnodes are now residing on a different physical host. Cool, isn&#8217;t it? The bottom line is: Scaling by adding a new host to the cluster is dead simple, but it will relocate a number of vnodes - not add new ones. So, be careful when you plan your Ring size.</p>

<p>generated rebar.conf:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% -*- erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;rel&quot;</span><span class="p">,</span> <span class="s">&quot;apps/aggregation&quot;</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">cover_enabled</span><span class="p">,</span> <span class="n">true</span><span class="p">}.</span>
</span><span class='line'><span class="p">{</span><span class="n">erl_opts</span><span class="p">,</span> <span class="p">[</span><span class="n">debug_info</span><span class="p">,</span> <span class="n">warnings_as_errors</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">edoc_opts</span><span class="p">,</span> <span class="p">[{</span><span class="n">dir</span><span class="p">,</span> <span class="s">&quot;../../doc&quot;</span><span class="p">}]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[{</span><span class="n">riak_core</span><span class="p">,</span> <span class="s">&quot;HEAD&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;https://github.com/basho/riak_core&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s">&quot;HEAD&quot;</span><span class="p">}}}</span>
</span><span class='line'>       <span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>changed rebar.conf:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% -*- erlang -*-</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;rel&quot;</span><span class="p">,</span> <span class="s">&quot;apps/aggregation&quot;</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">cover_enabled</span><span class="p">,</span> <span class="n">true</span><span class="p">}.</span>
</span><span class='line'><span class="p">{</span><span class="n">erl_opts</span><span class="p">,</span> <span class="p">[</span><span class="n">debug_info</span><span class="p">,</span> <span class="n">warnings_as_errors</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">edoc_opts</span><span class="p">,</span> <span class="p">[{</span><span class="n">dir</span><span class="p">,</span> <span class="s">&quot;../../doc&quot;</span><span class="p">}]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[{</span><span class="n">riak_core</span><span class="p">,</span> <span class="s">&quot;1.1.2&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="p">{</span><span class="n">git</span><span class="p">,</span> <span class="s">&quot;https://github.com/basho/riak_core&quot;</span><span class="p">,</span> <span class="p">{</span><span class="s">&quot;1.1.2&quot;</span><span class="p">}}}</span>
</span><span class='line'>       <span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;apps&quot;</span><span class="p">,</span> <span class="s">&quot;deps&quot;</span><span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>and compile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;project_root&gt;/erlang-rts-part-2 <span class="nv">$ </span>./rebar <span class="nv">compile</span>
</span><span class='line'><span class="o">==</span>&gt; lager <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; poolboy <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; protobuffs <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; basho_stats <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; riak_sysmon <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; mochiweb <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; webmachine <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; riak_core <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; rel <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; aggregation <span class="o">(</span>compile<span class="o">)</span>
</span><span class='line'>Compiled src/aggregation_sup.erl
</span><span class='line'>Compiled src/aggregation_node_event_handler.erl
</span><span class='line'>Compiled src/aggregation_app.erl
</span><span class='line'>Compiled src/aggregation_console.erl
</span><span class='line'>Compiled src/aggregation.erl
</span><span class='line'>Compiled src/aggregation_vnode.erl
</span><span class='line'>Compiled src/aggregation_ring_event_handler.erl
</span><span class='line'><span class="o">==</span>&gt; erlang-rts-part-2 <span class="o">(</span>compile<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create release nodes</h2>

<p>At this moment <em>rel</em> directory should contain the <em>aggregation</em> release configuration file. Because we have 2 applications (<em>diaserver</em> and <em>aggregation</em>) I&#8217;ll put them in separate <em>rel</em> subdirectories.</p>

<p>First, create <em>aggregation</em> sub-directory and move the content of <em>rel</em> there. Next, edit the second line of reltool.config to match the directory structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="o">{</span>lib_dirs, <span class="o">[</span><span class="s2">&quot;../../apps/&quot;</span>, <span class="s2">&quot;../../apps/aggregation/&quot;</span>, <span class="s2">&quot;../../deps/&quot;</span><span class="o">]}</span>,
</span></code></pre></td></tr></table></div></figure>


<p>Create the diaserver node (the same way as in Part1, only in different directory):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir diaserver
</span><span class='line'><span class="nb">cd </span>diaserver
</span><span class='line'>rel/diaserver <span class="nv">$ </span>../../rebar create-node <span class="nv">nodeid</span><span class="o">=</span><span class="nv">diaserver</span>
</span><span class='line'><span class="o">==</span>&gt; diaserver <span class="o">(</span>create-node<span class="o">)</span>
</span><span class='line'>Writing reltool.config
</span><span class='line'>Writing files/erl
</span><span class='line'>Writing files/nodetool
</span><span class='line'>Writing files/diaserver
</span><span class='line'>Writing files/sys.config
</span><span class='line'>Writing files/vm.args
</span><span class='line'>Writing files/diaserver.cmd
</span><span class='line'>Writing files/start_erl.cmd
</span></code></pre></td></tr></table></div></figure>


<p>Edit reltool.config the in the way already described in Part1.</p>

<p>Create 2 aggregation release nodes. They will work on different ports and we will be able to run them on the same physical host. This way we will simulate a 2-host Riak cluster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>../../rebar generate <span class="nv">target_dir</span><span class="o">=</span>./dev/dev1 <span class="nv">overlay_vars</span><span class="o">=</span>vars/dev1.config <span class="nv">appid</span><span class="o">=</span><span class="nv">aggregation</span>
</span><span class='line'><span class="o">==</span>&gt; aggregation <span class="o">(</span>generate<span class="o">)</span>
</span><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>../../rebar generate <span class="nv">target_dir</span><span class="o">=</span>./dev/dev2 <span class="nv">overlay_vars</span><span class="o">=</span>vars/dev2.config <span class="nv">appid</span><span class="o">=</span><span class="nv">aggregation</span>
</span><span class='line'><span class="o">==</span>&gt; aggregation <span class="o">(</span>generate<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s test the Riak cluster. Open a terminal and start the first node:</p>

<figure class='code'><figcaption><span>First console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>./dev/dev1/bin/aggregation console
</span><span class='line'>
</span><span class='line'>Exec: /home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev1/erts-5.8.4/bin/erlexec -boot /home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev1/releases/1/aggregation -embedded -config /home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev1/etc/app.config -args_file /home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev1/etc/vm.args -- console
</span><span class='line'>Root: /home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev1
</span><span class='line'>Erlang R14B03 <span class="o">(</span>erts-5.8.4<span class="o">)</span> <span class="o">[</span><span class="nb">source</span><span class="o">]</span> <span class="o">[</span>rq:1<span class="o">]</span> <span class="o">[</span>async-threads:5<span class="o">]</span> <span class="o">[</span>hipe<span class="o">]</span> <span class="o">[</span>kernel-poll:true<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">=</span>INFO <span class="nv">REPORT</span><span class="o">====</span> 21-Jun-2012::21:44:19 <span class="o">===</span>
</span><span class='line'>    alarm_handler: <span class="o">{</span><span class="nb">set</span>,<span class="o">{{</span>disk_almost_full,<span class="s2">&quot;/&quot;</span><span class="o">}</span>,<span class="o">[]}}</span>
</span><span class='line'>** Found 0 name clashes in code paths
</span><span class='line'>21:44:20.142 <span class="o">[</span>info<span class="o">]</span> Application lager started on node <span class="s1">&#39;aggregation1@127.0.0.1&#39;</span>
</span><span class='line'>21:44:20.236 <span class="o">[</span>warning<span class="o">]</span> No ring file available.
</span><span class='line'>21:44:20.237 <span class="o">[</span>info<span class="o">]</span> Application riak_core started on node <span class="s1">&#39;aggregation1@127.0.0.1&#39;</span>
</span><span class='line'>21:44:20.249 <span class="o">[</span>info<span class="o">]</span> Waiting <span class="k">for </span>application aggregation to start <span class="o">(</span>0 seconds<span class="o">)</span>.
</span><span class='line'>21:44:20.254 <span class="o">[</span>info<span class="o">]</span> Application aggregation started on node <span class="s1">&#39;aggregation1@127.0.0.1&#39;</span>
</span><span class='line'>Eshell V5.8.4  <span class="o">(</span>abort with ^G<span class="o">)</span>
</span><span class='line'><span class="o">(</span>aggregation1@127.0.0.1<span class="o">)</span>1&gt; 21:44:20.351 <span class="o">[</span>info<span class="o">]</span> Wait <span class="nb">complete </span><span class="k">for </span>application aggregation <span class="o">(</span>0 seconds<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have the first node &#8216;aggregation1@127.0.0.1&#8217; running.</p>

<p>Open a second terminal window, start the second node and join it to the first one:</p>

<figure class='code'><figcaption><span>Second console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>./dev/dev2/bin/aggregation start
</span><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>./dev/dev2/bin/aggregation-admin join aggregation1@127.0.0.1
</span><span class='line'>
</span><span class='line'>Sent join request to aggregation1@127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>Attach to the running second node and call aggregation:ping() few times. The result in my case is:</p>

<figure class='code'><figcaption><span>Second console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>erlang-rts-part-2/rel/aggregation <span class="nv">$ </span>./dev/dev2/bin/aggregation attach
</span><span class='line'>Attaching to /tmp//home/vasco/w/dia-test/erlang-rts-part-2/rel/aggregation/dev/dev2/erlang.pipe.1 <span class="o">(</span>^D to <span class="nb">exit</span><span class="o">)</span>
</span><span class='line'><span class="o">(</span>aggregation2@127.0.0.1<span class="o">)</span>1&gt; aggregation:ping<span class="o">()</span>.
</span><span class='line'>Ping received by node : <span class="s1">&#39;aggregation2@127.0.0.1&#39;</span>
</span><span class='line'><span class="o">{</span>pong,479555224749202520035584085735030365824602865664<span class="o">}</span>
</span><span class='line'><span class="o">(</span>aggregation2@127.0.0.1<span class="o">)</span>2&gt; aggregation:ping<span class="o">()</span>.
</span><span class='line'><span class="o">{</span>pong,639406966332270026714112114313373821099470487552<span class="o">}</span>
</span><span class='line'><span class="o">(</span>aggregation2@127.0.0.1<span class="o">)</span>3&gt;
</span></code></pre></td></tr></table></div></figure>


<p>As you see, the first invocation of ping() is received by the second node: &#8220;Ping received by node : &#8216;aggregation2@127.0.0.1&#8217;&#8221;. The second ping(), however, did not print anything. If we open the first console, we&#8217;ll see:</p>

<figure class='code'><figcaption><span>First console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>21:45:23.394 <span class="o">[</span>info<span class="o">]</span> <span class="s1">&#39;aggregation2@127.0.0.1&#39;</span> joined cluster with status <span class="s1">&#39;valid&#39;</span>
</span><span class='line'>Ping received by node : <span class="s1">&#39;aggregation1@127.0.0.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hey, distributed unicorns! :)</p>

<p>Now, we can change the aggregation() command to our needs or create any other command we need to call from the Diameter server.</p>

<h2>Credits</h2>

<p>Ryan Zezeski for the Riak <a href="https://github.com/rzezeski/try-try-try">tutorial</a> and rebar <a href="https://github.com/rzezeski/rebar_riak_core">templates</a></p>

<h2>References</h2>

<p>(*) <a href="http://en.wikipedia.org/wiki/Standing_on_the_shoulders_of_giants">&#8220;Standing on the shoulders of giants&#8221;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Real Time Server - Part 1 - Diameter Server]]></title>
    <link href="http://vascokk.github.com/blog/2012/05/13/erlang-real-time-server-part-1-diameter-server/"/>
    <updated>2012-05-13T18:32:00+01:00</updated>
    <id>http://vascokk.github.com/blog/2012/05/13/erlang-real-time-server-part-1-diameter-server</id>
    <content type="html"><![CDATA[<h2>Diameter Basics</h2>

<p>The <a href="http://en.wikipedia.org/wiki/Diameter_(protocol)">Diameter</a> protocol is defined by <a href="http://tools.ietf.org/html/rfc3588">RFC 3588</a>, and defines the minimum requirements for an AAA protocol. The best way to build up some knowledge in Diameter is to read the RFC first. At the end of the Wikipedia article there are also a bunch of links to good introductory articles. Anyway, few very basic points:</p>

<ul>
<li>There are several types of Diameter nodes - Client, Server, Relay, Proxy (we will focus only on the first two)</li>
<li>Diameter nodes communicate with &#8220;commands&#8221;;</li>
<li>Clients send a given command as &#8220;Request&#8221; and the server replays with the same command as &#8220;Answer&#8221;, e.g. Accounting-Request and Accounting-Answer - both will have the same command code (271), but in the case of the Client the &#8216;Command Flags&#8217; &#8216;R&#8217; bit will be set;</li>
<li>Each command has a predefined set of attributes. If there is a need for additional attributes, they can be specified as &#8220;Vendor Specific Attribute Value Pairs&#8221; (or AVPs for short);</li>
<li>RFC 3588 defines the basic set of AAA commands. Additional commands are defined in Diameter extensions called &#8220;Applications&#8221;. Don&#8217;t confuse them with the usual software applications (blame the Diameter creators for the poor choice of word here :), they are just declarative specifications (or &#8216;contracts&#8217;).</li>
</ul>


<h2>Diameter in Erlang</h2>

<p>Among the other great things Erlang contains a Diameter library. This library has two important modules - diameter and diameter_app. With the help of the first one we can create a Diameter service, which receives and sends commands. The second one - diameter_app - is the callback module for the service started with the first. Please, note that I am using &#8216;Diameter&#8217; to denote the protocol and &#8216;diameter&#8217; for the Erlang module.</p>

<p>I will not explain this part in details as it is better to take a look at the exelent example provided by Erlang creators inside the Diameter lib <a href="https://github.com/erlang/otp/tree/master/lib/diameter/examples/code">source</a>. Just a couple of important things:</p>

<p>How to start the service:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">SvcName</span> <span class="o">=</span> <span class="no">?MODULE</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">SvcOpts</span> <span class="o">=</span> <span class="p">[{</span><span class="n">&#39;Origin-Host&#39;</span><span class="p">,</span> <span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;.example.com&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Origin-Realm&#39;</span><span class="p">,</span> <span class="s">&quot;example.com&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Vendor-Id&#39;</span><span class="p">,</span> <span class="mi">193</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Product-Name&#39;</span><span class="p">,</span> <span class="s">&quot;Server&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Auth-Application-Id&#39;</span><span class="p">,</span> <span class="p">[</span><span class="no">?DIAMETER_APP_ID_COMMON</span><span class="p">]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="p">[{</span><span class="n">alias</span><span class="p">,</span> <span class="n">diameter_base_app</span><span class="p">},</span>
</span><span class='line'>                                       <span class="p">{</span><span class="n">dictionary</span><span class="p">,</span> <span class="no">?DIAMETER_DICT_COMMON</span><span class="p">},</span>
</span><span class='line'>                                       <span class="p">{</span><span class="n">module</span><span class="p">,</span> <span class="n">server_cb</span><span class="p">}]}],</span>
</span><span class='line'>        <span class="nv">TransportOpts</span> <span class="o">=</span>  <span class="p">[{</span><span class="n">transport_module</span><span class="p">,</span> <span class="n">diameter_tcp</span><span class="p">},</span>
</span><span class='line'>                                        <span class="p">{</span><span class="n">transport_config</span><span class="p">,</span> <span class="p">[{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span>
</span><span class='line'>                                        <span class="p">{</span><span class="n">ip</span><span class="p">,</span> <span class="p">{</span><span class="mi">127</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">}},</span> <span class="p">{</span><span class="n">port</span><span class="p">,</span> <span class="mi">3868</span><span class="p">}]}],</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">start</span><span class="p">(),</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">start_service</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">,</span> <span class="nv">SvcOpts</span><span class="p">),</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">add_transport</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{</span><span class="n">listen</span><span class="p">,</span> <span class="nv">TransportOpts</span><span class="p">}).</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are few things to be mentioned here:</p>

<ul>
<li>Service - the service will usually implement a given Diameter Application.</li>
<li>?DIAMETER_APP_ID_COMMON and ?DIAMETER_DICT_COMMON are defined in diameter.hrl</li>
<li>server_cb (line 10) will be our diameter callback module (implementation of diameter_app)</li>
</ul>


<p>diameter_cb will handle Diameter requests. An example function, which handles &#8220;Accounting-Request&#8221; command (code=271) is given below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">handle_request</span><span class="p">(</span><span class="nl">#diameter_packet</span><span class="p">{</span><span class="n">msg</span> <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="p">[]},</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{_,</span> <span class="nv">Caps</span><span class="p">})</span>
</span><span class='line'>                  <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="n">diameter_base_ACR</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nl">#diameter_caps</span><span class="p">{</span><span class="n">origin_host</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OH</span><span class="p">,_},</span>
</span><span class='line'>                           <span class="n">origin_realm</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OR</span><span class="p">,_}}</span>
</span><span class='line'>                <span class="o">=</span> <span class="nv">Caps</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nl">#diameter_base_ACR</span><span class="p">{</span><span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Acct-Application-Id&#39;</span> <span class="o">=</span> <span class="nv">AccAppId</span> <span class="p">}</span>
</span><span class='line'>                <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">Ans</span> <span class="o">=</span> <span class="nl">#diameter_base_ACA</span><span class="p">{</span><span class="n">&#39;Result-Code&#39;</span> <span class="o">=</span> <span class="no">?&#39;DIAMETER_BASE_RESULT-CODE_DIAMETER_SUCCESS&#39;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">&#39;Origin-Host&#39;</span> <span class="o">=</span> <span class="nv">OH</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">&#39;Origin-Realm&#39;</span> <span class="o">=</span> <span class="nv">OR</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                                   <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span><span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>What we have here is:</p>

<ul>
<li>get the origin host and origin realm in OH and OR from the peer&#8217;s &#8220;capabilities&#8221; (Caps)</li>
<li>get some of the request parameters like SessionId, record type, etc</li>
<li>constructing the Accounting-Answer message as #diameter_base_ACA record</li>
<li>reply with the answer</li>
</ul>


<p>Note: Base Diameter protocol (rfc3588) can be used for Accounting only. For Authentication and Authorization it must be extended with other Diameter applications, which depends on the type of the applications, e.g. Diameter Network Access Application(rfc4005) and Diameter Mobile IPv4 Application(rfc4004). In the IMS architecture for example, there are many subsystems communicating each other via different interfaces. Each interface is based on a given &#8220;Diameter Application&#8221;, which has a specific set of commands.</p>

<h2>Using rebar as a build tool</h2>

<p>I am going to use <a href="https://github.com/basho/rebar">Basho&#8217;s rebar</a> to build my application. The project will contain at least two separately deployable applications - Diameter server and Aggregation module. I&#8217;ll put them in separate app directories under my project&#8217;s root.</p>

<p>First, create &#8230;/apps/diaserver directory under your project dir and then, copy rebar executable in &#8220;diaserver&#8221; directory.</p>

<p>Now, let&#8217;s create the project structure for our application. For this, we will need a project template. There are many in github. I&#8217;ll use the templates generously provided by <a href="https://github.com/mbbx6spp/rebar-templates">Susan Potter</a>. Just clone the repository in your ~/.rebar/templates directory, then do:</p>

<figure class='code'><figcaption><span>Create erlang project</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.../apps/diaserver <span class="nv">$ </span>./rebar create <span class="nv">template</span><span class="o">=</span><span class="nv">project</span>
</span><span class='line'><span class="o">==</span>&gt; diaserver <span class="o">(</span>create<span class="o">)</span>
</span><span class='line'>Writing README
</span><span class='line'>Writing rebar.config
</span><span class='line'>Writing Emakefile
</span><span class='line'>Writing Makefile
</span><span class='line'>Writing .gitignore
</span></code></pre></td></tr></table></div></figure>


<p>Next, we will create the application files. We need 3 files: application resource file, application behavior implementation and application supervisor (see <a href="http://learnyousomeerlang.com/building-otp-applications">here</a> for a detailed explanation of OTP applications). They all will be created by rebar:</p>

<figure class='code'><figcaption><span>Create application using rebar</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.../apps/diaserver <span class="nv">$ </span>./rebar create-app <span class="nv">appid</span><span class="o">=</span><span class="nv">diaserver</span>
</span><span class='line'><span class="o">==</span>&gt; diaserver <span class="o">(</span>create-app<span class="o">)</span>
</span><span class='line'>Writing src/diaserver.app.src
</span><span class='line'>Writing src/diaserver_app.erl
</span><span class='line'>Writing src/diaserver_sup.erl
</span></code></pre></td></tr></table></div></figure>


<p>or alternatively, using template rtsapp.template (this is my version of Susan&#8217;s finapp.template):</p>

<figure class='code'><figcaption><span>Create application skeleton using rebar template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.../apps/diaserver <span class="nv">$ </span>./rebar create <span class="nv">template</span><span class="o">=</span>rtsapp <span class="nv">name</span><span class="o">=</span>diaserver
</span></code></pre></td></tr></table></div></figure>


<p>The above are the &#8220;supplementary&#8221; files needed to create our application in terms of Erlang/OTP framework. The actual job (starting diameter server, receieving commands, etc) will be done by a gen_server module, created with the following command:</p>

<figure class='code'><figcaption><span>Create gen_server module using template</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.../apps/diaserver <span class="nv">$ </span>./rebar create <span class="nv">template</span><span class="o">=</span>gen_server <span class="nv">name</span><span class="o">=</span><span class="nv">diameter</span>
</span><span class='line'><span class="o">==</span>&gt; diaserver <span class="o">(</span>create<span class="o">)</span>
</span><span class='line'>Writing src/diameter_srv.erl
</span></code></pre></td></tr></table></div></figure>


<p>This will create a file named diameter_srv.erl in the &#8230;apps/diaserver/src.
Again, gen_server template here is a modified (read: &#8220;renamed and the names inside the template changed&#8221;) version of finapp.template you git-cloned earlier.
Here is what the file should look like:</p>

<figure class='code'><figcaption><span>diameter_srv.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="c">%% @author &lt;your name&gt; &lt;your email&gt;</span>
</span><span class='line'><span class="c">%% @copyright 2012 &lt;your name&gt;</span>
</span><span class='line'><span class="c">%% @doc gen_server callback module implementation:</span>
</span><span class='line'><span class="c">%%</span>
</span><span class='line'><span class="c">%% @end</span>
</span><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">diameter_srv</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">author</span><span class="p">(</span><span class="n">&#39;&lt;your name&gt;&#39;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">behaviour</span><span class="p">(</span><span class="n">gen_server</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">start_link</span><span class="o">/</span><span class="mi">0</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">init</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="n">handle_call</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span> <span class="n">handle_cast</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">handle_info</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">code_change</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">stop</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">terminate</span><span class="o">/</span><span class="mi">2</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% TODO: If unnamed server, remove definition below.</span>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">SERVER</span><span class="p">,</span> <span class="no">?MODULE</span><span class="p">).</span>
</span><span class='line'><span class="c">%%%.</span>
</span><span class='line'><span class="c">%%%&#39;   PUBLIC API</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc starts gen_server implementation and caller links to the process too.</span>
</span><span class='line'><span class="p">-</span><span class="ni">spec</span> <span class="n">start_link</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">Pid</span><span class="p">}</span> <span class="p">|</span> <span class="n">ignore</span> <span class="p">|</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="nv">Error</span><span class="p">}</span>
</span><span class='line'>  <span class="k">when</span>
</span><span class='line'>      <span class="nv">Pid</span> <span class="p">::</span> <span class="n">pid</span><span class="p">(),</span>
</span><span class='line'>      <span class="nv">Error</span> <span class="p">::</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="nv">Pid</span><span class="p">}</span> <span class="p">|</span> <span class="n">term</span><span class="p">().</span>
</span><span class='line'><span class="nf">start_link</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c">% TODO: decide whether to name gen_server callback implementation or not.</span>
</span><span class='line'>  <span class="c">% gen_server:start_link(?MODULE, [], []). % for unnamed gen_server</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">start_link</span><span class="p">({</span><span class="n">local</span><span class="p">,</span> <span class="no">?SERVER</span><span class="p">},</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="p">[],</span> <span class="p">[]).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @doc stops gen_server implementation process</span>
</span><span class='line'><span class="p">-</span><span class="ni">spec</span> <span class="n">stop</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="nf">stop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nn">gen_server</span><span class="p">:</span><span class="n">cast</span><span class="p">(</span><span class="no">?SERVER</span><span class="p">,</span> <span class="n">stop</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">% TODO: add more public API here...</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%%.</span>
</span><span class='line'><span class="c">%%%&#39;   CALLBACKS</span>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">init</span><span class="p">(</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">handle_call</span><span class="p">(_</span><span class="nv">Req</span><span class="p">,</span> <span class="p">_</span><span class="nv">From</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">handle_cast</span><span class="p">(</span><span class="n">stop</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">stop</span><span class="p">,</span> <span class="n">normal</span><span class="p">,</span> <span class="nv">State</span><span class="p">};</span>
</span><span class='line'><span class="nf">handle_cast</span><span class="p">(_</span><span class="nv">Req</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">handle_info</span><span class="p">(_</span><span class="nv">Info</span><span class="p">,</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">noreply</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">code_change</span><span class="p">(_</span><span class="nv">OldVsn</span><span class="p">,</span> <span class="nv">State</span><span class="p">,</span> <span class="p">_</span><span class="nv">Extra</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% @callback gen_server</span>
</span><span class='line'><span class="nf">terminate</span><span class="p">(</span><span class="n">normal</span><span class="p">,</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="nf">terminate</span><span class="p">(</span><span class="n">shutdown</span><span class="p">,</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="nf">terminate</span><span class="p">({</span><span class="n">shutdown</span><span class="p">,</span> <span class="p">_</span><span class="nv">Reason</span><span class="p">},</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="nf">terminate</span><span class="p">(_</span><span class="nv">Reason</span><span class="p">,</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">.</span>
</span><span class='line'><span class="c">%%%.</span>
</span><span class='line'><span class="c">%%%&#39;   PRIVATE FUNCTIONS</span>
</span><span class='line'><span class="c">% TODO: Add private helper functions here.</span>
</span><span class='line'>
</span><span class='line'><span class="c">%%%.</span>
</span><span class='line'><span class="c">%%% vim: set filetype=erlang tabstop=2 foldmarker=%%%&#39;,%%%. foldmethod=marker:</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now, as we have the skeleton, we can start to flesh it out with our specific code.
What we need to do is to put the start() snippet from the above in the init() function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">(</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">SvcName</span> <span class="o">=</span> <span class="no">?MODULE</span><span class="p">,</span>
</span><span class='line'>        <span class="nv">SvcOpts</span> <span class="o">=</span> <span class="p">[{</span><span class="n">&#39;Origin-Host&#39;</span><span class="p">,</span> <span class="nb">atom_to_list</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;.example.com&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Origin-Realm&#39;</span><span class="p">,</span> <span class="s">&quot;example.com&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Vendor-Id&#39;</span><span class="p">,</span> <span class="mi">193</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Product-Name&#39;</span><span class="p">,</span> <span class="s">&quot;Server&quot;</span><span class="p">},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">&#39;Auth-Application-Id&#39;</span><span class="p">,</span> <span class="p">[</span><span class="no">?DIAMETER_APP_ID_COMMON</span><span class="p">]},</span>
</span><span class='line'>                        <span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="p">[{</span><span class="n">alias</span><span class="p">,</span> <span class="n">diameter_base_app</span><span class="p">},</span>
</span><span class='line'>                                       <span class="p">{</span><span class="n">dictionary</span><span class="p">,</span> <span class="no">?DIAMETER_DICT_COMMON</span><span class="p">},</span>
</span><span class='line'>                                       <span class="p">{</span><span class="n">module</span><span class="p">,</span> <span class="n">server_cb</span><span class="p">}]}],</span>
</span><span class='line'>        <span class="nv">TransportOpts</span> <span class="o">=</span>  <span class="p">[{</span><span class="n">transport_module</span><span class="p">,</span> <span class="n">diameter_tcp</span><span class="p">},</span>
</span><span class='line'>                                        <span class="p">{</span><span class="n">transport_config</span><span class="p">,</span> <span class="p">[{</span><span class="n">reuseaddr</span><span class="p">,</span> <span class="n">true</span><span class="p">},</span>
</span><span class='line'>                                        <span class="p">{</span><span class="n">ip</span><span class="p">,</span> <span class="p">{</span><span class="mi">127</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">}},</span> <span class="p">{</span><span class="n">port</span><span class="p">,</span> <span class="mi">3868</span><span class="p">}]}],</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">start</span><span class="p">(),</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">start_service</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">,</span> <span class="nv">SvcOpts</span><span class="p">),</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">add_transport</span><span class="p">(</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{</span><span class="n">listen</span><span class="p">,</span> <span class="nv">TransportOpts</span><span class="p">}),</span>
</span><span class='line'>       <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="nv">State</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then just add the headers to be included in the beginning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;diameter.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;diameter_gen_base_rfc3588.hrl&quot;</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>and that&#8217;s pretty much for the gen_server. It is of course a good idea to create a macros for the service options, as we will probably implement several Diameter Applications in this module, so, each one will need different name, svc and transport options. For simplicity&#8217;s sake, I&#8217;ll leave it as is for now.</p>

<p>Why we bother at all with those gen_server behaviour, templates, etc? Fist we need a gen_server in order to comply with OTP application requirements and second - we can use this behaviour later to control our server.</p>

<p>As you already know, there is another module we need to implement - the diameter_app (the callback) module. Here is how it looks like:</p>

<figure class='code'><figcaption><span>server_cb.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">-</span><span class="ni">module</span><span class="p">(</span><span class="n">server_cb</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;diameter.hrl&quot;</span><span class="p">).</span>
</span><span class='line'><span class="p">-</span><span class="ni">include_lib</span><span class="p">(</span><span class="s">&quot;diameter_gen_base_rfc3588.hrl&quot;</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="c">%% diameter callbacks</span>
</span><span class='line'><span class="p">-</span><span class="ni">export</span><span class="p">([</span><span class="n">peer_up</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">peer_down</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">pick_peer</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>         <span class="n">prepare_request</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">prepare_retransmit</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span>
</span><span class='line'>         <span class="n">handle_answer</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>         <span class="n">handle_error</span><span class="o">/</span><span class="mi">4</span><span class="p">,</span>
</span><span class='line'>         <span class="n">handle_request</span><span class="o">/</span><span class="mi">3</span><span class="p">]).</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">-</span><span class="ni">define</span><span class="p">(</span><span class="no">UNEXPECTED</span><span class="p">,</span> <span class="nn">erlang</span><span class="p">:</span><span class="n">error</span><span class="p">({</span><span class="n">unexpected</span><span class="p">,</span> <span class="no">?MODULE</span><span class="p">,</span> <span class="no">?LINE</span><span class="p">})).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">peer_up</span><span class="p">(_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{</span><span class="nv">PeerRef</span><span class="p">,</span> <span class="p">_},</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;up: </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">PeerRef</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">State</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">peer_down</span><span class="p">(_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{</span><span class="nv">PeerRef</span><span class="p">,</span> <span class="p">_},</span> <span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="nn">io</span><span class="p">:</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;down: </span><span class="si">~p~n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">PeerRef</span><span class="p">]),</span>
</span><span class='line'>            <span class="nv">State</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">pick_peer</span><span class="p">(_,</span> <span class="p">_,</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">_</span><span class="nv">State</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="no">?UNEXPECTED</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">prepare_request</span><span class="p">(_,</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">_</span><span class="nv">Peer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="no">?UNEXPECTED</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">prepare_retransmit</span><span class="p">(_</span><span class="nv">Packet</span><span class="p">,</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">_</span><span class="nv">Peer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="no">?UNEXPECTED</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_answer</span><span class="p">(_</span><span class="nv">Packet</span><span class="p">,</span> <span class="p">_</span><span class="nv">Request</span><span class="p">,</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">_</span><span class="nv">Peer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="no">?UNEXPECTED</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_error</span><span class="p">(_</span><span class="nv">Reason</span><span class="p">,</span> <span class="p">_</span><span class="nv">Request</span><span class="p">,</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">_</span><span class="nv">Peer</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>            <span class="no">?UNEXPECTED</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">handle_request</span><span class="p">(</span><span class="nl">#diameter_packet</span><span class="p">{</span><span class="n">msg</span> <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span> <span class="n">errors</span> <span class="o">=</span> <span class="p">[]},</span> <span class="p">_</span><span class="nv">SvcName</span><span class="p">,</span> <span class="p">{_,</span> <span class="nv">Caps</span><span class="p">})</span>
</span><span class='line'>                  <span class="k">when</span> <span class="nb">is_record</span><span class="p">(</span><span class="nv">Req</span><span class="p">,</span> <span class="n">diameter_base_ACR</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nl">#diameter_caps</span><span class="p">{</span><span class="n">origin_host</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OH</span><span class="p">,_},</span>
</span><span class='line'>                           <span class="n">origin_realm</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OR</span><span class="p">,_}}</span>
</span><span class='line'>                <span class="o">=</span> <span class="nv">Caps</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nl">#diameter_base_ACR</span><span class="p">{</span><span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Acct-Application-Id&#39;</span> <span class="o">=</span> <span class="nv">AccAppId</span> <span class="p">}</span>
</span><span class='line'>                <span class="o">=</span> <span class="nv">Req</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">Ans</span> <span class="o">=</span> <span class="nl">#diameter_base_ACA</span><span class="p">{</span><span class="n">&#39;Result-Code&#39;</span> <span class="o">=</span> <span class="no">?&#39;DIAMETER_BASE_RESULT-CODE_DIAMETER_SUCCESS&#39;</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Origin-Host&#39;</span> <span class="o">=</span> <span class="nv">OH</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Origin-Realm&#39;</span> <span class="o">=</span> <span class="nv">OR</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">Id</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="nv">RecType</span><span class="p">,</span>
</span><span class='line'>                               <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="nv">RecNum</span>
</span><span class='line'>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>            <span class="p">{</span><span class="n">reply</span><span class="p">,</span> <span class="nv">Ans</span><span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we handle only the Accounting-Request (ACR). In reality, this will be the place to invoke the &#8220;accounting&#8221; function once we get the Aggregation module ready (it will be subject of the next chapter). As for now, we simply replay with &#8220;DIAMETER_BASE_RESULT-CODE_DIAMETER_SUCCESS&#8221;. There are plenty of other requests we have to handle, but as the purpose of this article is just to show some examples, I&#8217;ll live the rest to the readers. As you see the other diameter_app functions just return &#8220;Unexpected Error&#8221;.</p>

<p>We have all the pieces needed to run the server, but there is few tweaks left before we get a working erlang applications.</p>

<p>First, add &#8220;diameter&#8221; application in the application resource file:</p>

<figure class='code'><figcaption><span>diaserver.app.src</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">application</span><span class="p">,</span> <span class="n">diaserver</span><span class="p">,</span>
</span><span class='line'> <span class="p">[</span>
</span><span class='line'>  <span class="p">{</span><span class="n">description</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">vsn</span><span class="p">,</span> <span class="s">&quot;0.1.0&quot;</span><span class="p">},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">registered</span><span class="p">,</span> <span class="p">[]},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">applications</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                  <span class="n">kernel</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">stdlib</span><span class="p">,</span>
</span><span class='line'>                  <span class="n">diameter</span>
</span><span class='line'>                 <span class="p">]},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">mod</span><span class="p">,</span> <span class="p">{</span> <span class="n">diaserver_app</span><span class="p">,</span> <span class="p">[]}},</span>
</span><span class='line'>  <span class="p">{</span><span class="n">env</span><span class="p">,</span> <span class="p">[]}</span>
</span><span class='line'> <span class="p">]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p> This will run diameter application on server startup. We can now remove the diameter:start() call from the diameter_srv.</p>

<p> Our server itself, will be started by the supervisor, thus, we have to write the supervisor&#8217;s &#8220;Child Specification&#8221;. It will look like this:</p>

<figure class='code'><figcaption><span>server supervisor&#8217;s ChildSpec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'>     <span class="nv">DiaServer</span> <span class="o">=</span> <span class="p">{</span><span class="n">diaserver</span><span class="p">,{</span><span class="n">diameter_srv</span><span class="p">,</span><span class="n">start_link</span><span class="p">,[]},</span>
</span><span class='line'>                 <span class="n">permanent</span><span class="p">,</span>
</span><span class='line'>                 <span class="mi">5000</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">worker</span><span class="p">,</span>
</span><span class='line'>                 <span class="p">[</span><span class="n">server_cb</span><span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whole supervisor&#8217;s init():</p>

<figure class='code'><figcaption><span>server supervisor diaserver_sup.erl</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">init</span><span class="p">([])</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">DiaServer</span> <span class="o">=</span> <span class="p">{</span><span class="n">diaserver</span><span class="p">,{</span><span class="n">diameter_srv</span><span class="p">,</span><span class="n">start_link</span><span class="p">,[]},</span>
</span><span class='line'>                     <span class="n">permanent</span><span class="p">,</span>
</span><span class='line'>                     <span class="mi">5000</span><span class="p">,</span>
</span><span class='line'>                     <span class="n">worker</span><span class="p">,</span>
</span><span class='line'>                     <span class="p">[</span><span class="n">server_cb</span><span class="p">]},</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="p">{</span> <span class="p">{</span><span class="n">one_for_one</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span> <span class="p">[</span><span class="nv">DiaServer</span><span class="p">]}</span> <span class="p">}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>In rebar.config erl_opts, add the location of diameter header files. Your final configuration should be similar to:</p>

<figure class='code'><figcaption><span>rebar.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="p">{</span><span class="n">lib_dirs</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">erl_first_files</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">erl_opts</span><span class="p">,</span> <span class="p">[{</span><span class="n">i</span><span class="p">,</span><span class="s">&quot;include&quot;</span><span class="p">},{</span><span class="n">i</span><span class="p">,</span> <span class="s">&quot;/usr/local/lib/erlang/lib/diameter-0.9/include&quot;</span><span class="p">},</span> <span class="p">{</span><span class="n">src_dirs</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;src&quot;</span><span class="p">]}]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">erlydtl_opts</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">cover_enabled</span><span class="p">,</span> <span class="n">true</span><span class="p">}.</span>
</span><span class='line'><span class="p">{</span><span class="n">clean_files</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;ebin/*.beam&quot;</span><span class="p">,</span> <span class="s">&quot;priv/log/*&quot;</span><span class="p">,</span> <span class="s">&quot;rel/*&quot;</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">target</span><span class="p">,</span> <span class="s">&quot;rel&quot;</span><span class="p">}.</span>
</span><span class='line'><span class="p">{</span><span class="n">app_bin</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">deps_dir</span><span class="p">,</span> <span class="p">[</span><span class="s">&quot;deps&quot;</span><span class="p">]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">deps</span><span class="p">,</span> <span class="p">[]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">edoc_opts</span><span class="p">,</span> <span class="p">[{</span><span class="n">doclet</span><span class="p">,</span> <span class="n">edown_doclet</span><span class="p">}]}.</span>
</span><span class='line'><span class="p">{</span><span class="n">sub_dirs</span><span class="p">,</span> <span class="p">[]}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last step is to compile the application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./rebar compile
</span></code></pre></td></tr></table></div></figure>


<p>And we are done with the server.</p>

<p>Now, go to the project&#8217;s root directory and copy rebar executable there. What we are going to do is to create Erlang &#8220;executable&#8221;:</p>

<p>Run the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir rel
</span><span class='line'><span class="nb">cd </span>rel
</span><span class='line'> ../rebar create-node <span class="nv">nodeid</span><span class="o">=</span><span class="nv">diaserver</span>
</span><span class='line'> <span class="o">==</span>&gt; rel <span class="o">(</span>create-node<span class="o">)</span>
</span><span class='line'>Writing reltool.config
</span><span class='line'>Writing files/erl
</span><span class='line'>Writing files/nodetool
</span><span class='line'>Writing files/diaserver
</span><span class='line'>Writing files/sys.config
</span><span class='line'>Writing files/vm.args
</span><span class='line'>Writing files/diaserver.cmd
</span><span class='line'>Writing files/start_erl.cmd
</span></code></pre></td></tr></table></div></figure>


<p>The above will create Erlang node release configuration.</p>

<p>Almost done, but first we have to edit the reltool.config, which was just created by the rebar:</p>

<ul>
<li>put our &#8220;diaserver&#8221; application directory in the &#8220;lib_dirs&#8221;:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="o">{</span>lib_dirs, <span class="o">[</span><span class="s2">&quot;../apps&quot;</span>,<span class="s2">&quot;../apps/diaserver&quot;</span><span class="o">]}</span>,
</span></code></pre></td></tr></table></div></figure>


<p></p>

<ul>
<li>add &#8220;diameter&#8221; and &#8220;diaserver&#8221; applications in the list of modules needed by the release:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="o">{</span>rel, <span class="s2">&quot;diaserver&quot;</span>, <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>         kernel,
</span><span class='line'>         stdlib,
</span><span class='line'>         sasl,
</span><span class='line'>         diameter,
</span><span class='line'>         diaserver
</span><span class='line'>        <span class="o">]}</span>,
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>remove {incl_cond, exclude} clause. incl_cond=&#8221;derived&#8221; will be used as defauld, which means that Reltool will include applications that it detects can be used by any applications in the &#8220;rel&#8221; tuple.</li>
</ul>


<p>Full reltool.config should be similar to:</p>

<figure class='code'><figcaption><span>reltool.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>sys, <span class="o">[</span>
</span><span class='line'>       <span class="o">{</span>lib_dirs, <span class="o">[</span><span class="s2">&quot;../apps&quot;</span>,<span class="s2">&quot;../apps/diaserver&quot;</span><span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>erts, <span class="o">[{</span>mod_cond, derived<span class="o">}</span>, <span class="o">{</span>app_file, strip<span class="o">}]}</span>,
</span><span class='line'>       <span class="o">{</span>app_file, strip<span class="o">}</span>,
</span><span class='line'>       <span class="o">{</span>rel, <span class="s2">&quot;diaserver&quot;</span>, <span class="s2">&quot;1&quot;</span>,
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>         kernel,
</span><span class='line'>         stdlib,
</span><span class='line'>         sasl,
</span><span class='line'>         diameter,
</span><span class='line'>         diaserver
</span><span class='line'>        <span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>rel, <span class="s2">&quot;start_clean&quot;</span>, <span class="s2">&quot;&quot;</span>,
</span><span class='line'>        <span class="o">[</span>
</span><span class='line'>         kernel,
</span><span class='line'>         stdlib
</span><span class='line'>        <span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>boot_rel, <span class="s2">&quot;diaserver&quot;</span><span class="o">}</span>,
</span><span class='line'>       <span class="o">{</span>profile, embedded<span class="o">}</span>,
</span><span class='line'>       <span class="o">{</span>excl_archive_filters, <span class="o">[</span><span class="s2">&quot;.*&quot;</span><span class="o">]}</span>, %% Do not archive built libs
</span><span class='line'>       <span class="o">{</span>excl_sys_filters, <span class="o">[</span><span class="s2">&quot;^bin/.*&quot;</span>, <span class="s2">&quot;^erts.*/bin/(dialyzer|typer)&quot;</span>,
</span><span class='line'>                           <span class="s2">&quot;^erts.*/(doc|info|include|lib|man|src)&quot;</span><span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>excl_app_filters, <span class="o">[</span><span class="s2">&quot;\.gitignore&quot;</span><span class="o">]}</span>,
</span><span class='line'>       <span class="o">{</span>app, sasl,   <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>,
</span><span class='line'>       <span class="o">{</span>app, stdlib, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>,
</span><span class='line'>       <span class="o">{</span>app, kernel, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>,
</span><span class='line'>       <span class="o">{</span>app, diaserver, <span class="o">[{</span>incl_cond, include<span class="o">}]}</span>
</span><span class='line'>      <span class="o">]}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>target_dir, <span class="s2">&quot;diaserver&quot;</span><span class="o">}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>overlay, <span class="o">[</span>
</span><span class='line'>           <span class="o">{</span>mkdir, <span class="s2">&quot;log/sasl&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/erl&quot;</span>, <span class="s2">&quot;\{\{erts_vsn\}\}/bin/erl&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/nodetool&quot;</span>, <span class="s2">&quot;\{\{erts_vsn\}\}/bin/nodetool&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/diaserver&quot;</span>, <span class="s2">&quot;bin/diaserver&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/sys.config&quot;</span>, <span class="s2">&quot;releases/\{\{rel_vsn\}\}/sys.config&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/diaserver.cmd&quot;</span>, <span class="s2">&quot;bin/diaserver.cmd&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/start_erl.cmd&quot;</span>, <span class="s2">&quot;bin/start_erl.cmd&quot;</span><span class="o">}</span>,
</span><span class='line'>           <span class="o">{</span>copy, <span class="s2">&quot;files/vm.args&quot;</span>, <span class="s2">&quot;releases/\{\{rel_vsn\}\}/vm.args&quot;</span><span class="o">}</span>
</span><span class='line'>          <span class="o">]}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Back in the top directory, we need a simple rebar.config file:</p>

<figure class='code'><figcaption><span>rebar.config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>sub_dirs, <span class="o">[</span><span class="s2">&quot;apps/diaserver&quot;</span>,
</span><span class='line'>            <span class="s2">&quot;rel&quot;</span><span class="o">]}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>erl_opts, <span class="o">[</span>debug_info<span class="o">]}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>lib_dirs, <span class="o">[</span><span class="s2">&quot;apps&quot;</span>, <span class="s2">&quot;deps&quot;</span><span class="o">]}</span>.
</span><span class='line'>
</span><span class='line'><span class="o">{</span>deps, <span class="o">[]}</span>.
</span></code></pre></td></tr></table></div></figure>


<p>Execute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/rebar generate
</span></code></pre></td></tr></table></div></figure>


<p>At this point, if everything went well, you should have a working Erlang application. Let&#8217;s try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./rel/diaserver/bin/diaserver start
</span><span class='line'><span class="nv">$ </span>./rel/diaserver/bin/diaserver ping
</span><span class='line'>pong
</span></code></pre></td></tr></table></div></figure>


<p>It is running, but is it capable to serve Diameter requests? We need a client to test this. I&#8217;m going to use the one provided in Diameter library&#8217;s <a href="https://github.com/erlang/otp/tree/master/lib/diameter/examples/code">examples</a>, but I need to implement Accounting Request first. Just add the following code to client.erl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">call_ACR</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="n">call_ACR</span><span class="p">(</span><span class="no">?SVC_NAME</span><span class="p">).</span>
</span><span class='line'>
</span><span class='line'><span class="nf">call_ACR</span><span class="p">(</span><span class="nv">Name</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>        <span class="nv">SId</span> <span class="o">=</span> <span class="nn">diameter</span><span class="p">:</span><span class="n">session_id</span><span class="p">(</span><span class="no">?L</span><span class="p">(</span><span class="nv">Name</span><span class="p">)),</span>
</span><span class='line'>        <span class="nv">ACR</span> <span class="o">=</span> <span class="nl">#diameter_base_ACR</span><span class="p">{</span><span class="n">&#39;Session-Id&#39;</span> <span class="o">=</span> <span class="nv">SId</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">&#39;Accounting-Record-Type&#39;</span> <span class="o">=</span> <span class="no">?&#39;DIAMETER_BASE_ACCOUNTING-RECORD-TYPE_EVENT_RECORD&#39;</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">&#39;Accounting-Record-Number&#39;</span> <span class="o">=</span> <span class="mi">1</span><span class="p">},</span>
</span><span class='line'>        <span class="nn">diameter</span><span class="p">:</span><span class="n">call</span><span class="p">(</span><span class="nv">Name</span><span class="p">,</span> <span class="n">client_base_app</span><span class="p">,</span> <span class="nv">ACR</span><span class="p">,</span> <span class="p">[]).</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>and change the client_cb.erl function &#8220;prepare_request&#8221; to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">prepare_request</span><span class="p">(</span><span class="nl">#diameter_packet</span><span class="p">{</span><span class="n">msg</span> <span class="o">=</span> <span class="nv">Rec</span><span class="p">}</span> <span class="o">=</span> <span class="nv">Pkt</span><span class="p">,</span> <span class="p">_,</span> <span class="p">{_,</span> <span class="nv">Caps</span><span class="p">})</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nl">#diameter_caps</span><span class="p">{</span><span class="n">origin_host</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OH</span><span class="p">,</span> <span class="nv">DH</span><span class="p">},</span>
</span><span class='line'>                   <span class="n">origin_realm</span> <span class="o">=</span> <span class="p">{</span><span class="nv">OR</span><span class="p">,</span> <span class="nv">DR</span><span class="p">}}</span>
</span><span class='line'>        <span class="o">=</span> <span class="nv">Caps</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">{</span><span class="nb">send</span><span class="p">,</span> <span class="nv">Rec</span><span class="nl">#diameter_base_ACR</span><span class="p">{</span><span class="n">&#39;Origin-Host&#39;</span> <span class="o">=</span> <span class="nv">OH</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">&#39;Origin-Realm&#39;</span> <span class="o">=</span> <span class="nv">OR</span><span class="p">,</span>
</span><span class='line'>                                 <span class="n">&#39;Destination-Realm&#39;</span> <span class="o">=</span> <span class="nv">DR</span><span class="p">}}.</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally - that&#8217;s it. Compile the client, run the Erlang shell and try it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nv">Eshell</span> <span class="nv">V5</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">4</span>  <span class="p">(</span><span class="n">abort</span> <span class="n">with</span> <span class="err">^</span><span class="nv">G</span><span class="p">)</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nn">diameter</span><span class="p">:</span><span class="n">start</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="nn">client</span><span class="p">:</span><span class="n">start</span><span class="p">().</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nn">client</span><span class="p">:</span><span class="n">connect</span><span class="p">(</span><span class="n">tcp</span><span class="p">).</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="err">#</span><span class="nv">Ref</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">0</span><span class="p">.</span><span class="mi">50</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nn">client</span><span class="p">:</span><span class="n">call_ACR</span><span class="p">().</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,{</span><span class="n">diameter_base_ACA</span><span class="p">,</span><span class="s">&quot;client;1400340423;1;nonode@nohost&quot;</span><span class="p">,</span>
</span><span class='line'>                       <span class="mi">2001</span><span class="p">,</span><span class="s">&quot;diameter_srv.example.com&quot;</span><span class="p">,</span><span class="s">&quot;example.com&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,[],[],[],</span>
</span><span class='line'>                       <span class="p">[],[],[],[],[],[],[],[],[],[]}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We happily got an Accounting-Answer(ACA) Diameter response :-)</p>

<p>Well, at this moment we can handle just one command, but implementing the rest of the &#8220;Diameter Base Application&#8221; spec shouldn&#8217;t be much of a problem with everything we&#8217;ve done so far.</p>

<p>You can find the source code in github: <a href="https://github.com/vascokk/diameter-test/tree/master/erlang-rts-part-1">https://github.com/vascokk/diameter-test</a></p>

<p>In the next article I&#8217;ll start with the implementation of the Aggregation module. See ya!</p>

<h2>Credits</h2>

<p>Susan Potter for the rebar <a href="https://github.com/mbbx6spp/rebar-templates">templates</a></p>

<p>Frederic Trottier-Hebert for the amazing <a href="http://learnyousomeerlang.com/">&#8220;Learn You Some Erlang&#8221;</a> book</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Real Time Server - Introduction]]></title>
    <link href="http://vascokk.github.com/blog/2012/05/11/erlang-real-time-server-introduction/"/>
    <updated>2012-05-11T19:53:00+01:00</updated>
    <id>http://vascokk.github.com/blog/2012/05/11/erlang-real-time-server-introduction</id>
    <content type="html"><![CDATA[<p>Erlang RTS - Introduction</p>

<p>What I am planning to do is a &#8216;pet project&#8217; utilising my new passion - functional programing in Erlang. In this project I&#8217;ll sketch some ideas for a telecom &#8220;Online Charging System&#8221;(OCS). I have no intention to implement a real OCS as defined in the 3GPP specifications. It will be just a small part of what is more popular in non-3GPP world as a &#8220;Real Time Server&#8221; (RTS).</p>

<p>&#8220;WTF is a RTS?&#8221; - you are asking. Well, when it comes to the Billing System domain, this is a piece of software, which is responsible for the Authentication, Authorisation and Accounting (AAA) services. This is the part of the system which grants you access to and charges for the usage of a given service, such as - network access, voice calls, video on demand, text messages, etc.</p>

<p>The basic parts of the usual RTS are:</p>

<ul>
<li>AAA protocol server, which will receive the AAA requests.</li>
<li>A module, I will call it &#8220;Aggregation module&#8221;, which purpose is to calculate the answers (for those of you familiar with the 3GPP - it is somewat combined Account Balance Management Function (ABMF) and Rating Function (RF) ) .</li>
</ul>


<p>The AAA protocol is an important part. If you have ever heard about &#8216;RADIUS&#8217; - that&#8217;s it. It is a protocol widely used in ISPs and VoIP operators. What I am planning to use, however, is the RADIUS successor - Diameter. Partially, because the standard Erlang distribution has a Diameter library and partially, because I want to learn more about Diameter.</p>

<p>The second part, which is even more interesting - the Aggregation - is the place where all the calculations will be done. For example - if you want to watch a film on demand or make a voice/video call the system has to check whether you have enough money on your balance and will grant or not access to the service - that&#8217;s the &#8216;authorization&#8217; part. After the end of the call it will calculate the amount to deduct from your balance, depending on the time you spent talking and the destination (local or international call, etc.). That&#8217;s the &#8216;accounting&#8217; part. Since there can be between hunderds and millions (if you are someone like AT&amp;T :-)  ) of subscribers, simultaneously using your services, the system has to be scalable. By &#8216;scalable&#8217; I mean - painlessly adding a new Aggregation module with a minimum effort. It looks like Riak would fit this purpose perfectly.</p>

<p>A note to the readers - this is not a tutorial for beginners and some initial knowledge in Erlang will be required. I highly recommend Frederic Trottier-Hebert&#8217;s <a href="http://learnyousomeerlang.com">Learn You Some Erlang</a>. Also, I strongly recommend any of the following publications to be used only for educational purposes and strictly not in prodution.</p>

<p>Now, let&#8217;s go to the first part of our <a href="http://vas.io/blog/2012/05/13/erlang-real-time-server-part-1-diameter-server/">&#8220;Erlang RTS&#8221; project</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The first one]]></title>
    <link href="http://vascokk.github.com/blog/2012/05/10/the-first-one/"/>
    <updated>2012-05-10T23:00:00+01:00</updated>
    <id>http://vascokk.github.com/blog/2012/05/10/the-first-one</id>
    <content type="html"><![CDATA[<h2>A Word From The Author</h2>

<p>Hello all!</p>

<p>This is the second attempt to start a blog. This time my intention is to create a &#8216;working blog&#8217;. Here I will write about the new stuff I&#8217;m learning in programming and the reason to start this is because trying to explain something is the best way to learn. To quote <a href="http://blogs.msdn.com/b/ericlippert/">Eric Lippert</a>:</p>

<blockquote><p>Writing a blog is also tremendously helpful; by requiring me to explain complex topics to other people, I am forced to confront my own inadequate understanding of various topics all the time.</p></blockquote>



]]></content>
  </entry>
  
</feed>
