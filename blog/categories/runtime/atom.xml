<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: runtime | Reinventing The Wheel]]></title>
  <link href="http://vascokk.github.com/blog/categories/runtime/atom.xml" rel="self"/>
  <link href="http://vascokk.github.com/"/>
  <updated>2013-03-24T00:22:00+00:00</updated>
  <id>http://vascokk.github.com/</id>
  <author>
    <name><![CDATA[Vasco Kolarov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang: How to create and compile module in run-time]]></title>
    <link href="http://vascokk.github.com/blog/2013/03/23/erlang-how-to-create-and-compile-module-in-run-time/"/>
    <updated>2013-03-23T15:40:00+00:00</updated>
    <id>http://vascokk.github.com/blog/2013/03/23/erlang-how-to-create-and-compile-module-in-run-time</id>
    <content type="html"><![CDATA[<p>This is a very basic how-to, just to get you started with the topic and demonstrate that it is not so scary as you might think in the beginning.</p>

<p>Goal: Define and compile an Erlang module in run-time.</p>

<p>Let say we want to create the following module dynamically:</p>

<p>``` erlang
-module(div_test).
-export([divide/2]).</p>

<p>divide(A,B) when B =/= 0 -></p>

<pre><code>A/B;
</code></pre>

<p>divide(<em>,</em>) -></p>

<pre><code>{error, division_by_zero}.
</code></pre>

<p>```</p>

<p>This is really simple module, just to illustrate the approach.</p>

<p>We are going to use the erl_syntax module, which provides facilities to create Erlang source code in form of Abstract Syntax Trees.
Let's first take a look at our simple module. Here we have:</p>

<ol>
<li>Module declaration where the name of the module is an Erlang atom (div_test).</li>
<li>Export clause with a list of arity qualifiers. In our case - only one qualifier, which contains an atom (function name) and an integer (arity)</li>
<li>Function "divide" (again the name is an atom) and two function clauses</li>
</ol>


<p>3.1. First clause contains:</p>

<pre><code>- two variables A and B
- a guard, which is an infix operation ("=/=") between the variable B and the integer 0.
- a body, which is an infix operation ("/") between two variables A and B
</code></pre>

<p>3.2. Second clause contains:</p>

<pre><code>- two anonymous variables ("_,_")
- a body, which is a tuple of two atoms - "error" and "division_by_zero"
</code></pre>

<p>Now, we are going to create each of the above, using the functions provided by erl_syntax module:</p>

<ol>
<li>"module" attribute:</li>
</ol>


<p>"-module(div_test)" is a module attribute with argument - the name of the module:</p>

<p><code>erlang
Module = erl_syntax:attribute(erl_syntax:atom(module),[erl_syntax:atom(div_test)]).
ModForm =  erl_syntax:revert(Module).
</code></p>

<p>To make the Module AST compatible with the erl_parse trees, which are used by the "compile" module (i.e. make a "Form" out of the AST), we have to invoke revert().</p>

<ol>
<li>"export" attribute:</li>
</ol>


<p>It is a bit tricky... I would happily use just the line: ExportForm = {attribute,2,export,[{divide,2}]}, but for the sake of completeness, let's go deeper:</p>

<p><code>erlang
Export = erl_syntax:attribute(erl_syntax:atom(export),[erl_syntax:list([erl_syntax:arity_qualifier(erl_syntax:atom(divide),erl_syntax:integer(2))])]).
ExportForm = erl_syntax:revert(Export).
</code></p>

<p>Scary at a first sight, isn't it? In fact, it is quite straightforward:</p>

<p>First we are going to create an attribute. The attribute() function has two parameters - name of the attribute (which is an atom - "export") and a list of arguments. In this case the list of arguments has only one element, which is again - a list, containing arity qualifiers (pairs "name/arity") of the exported functions. So we have a call to attribute(atom, [Arguments]), where Arguments is "list([arity_qualifieris])". The arity qualifier is an atom and an integer.</p>

<ol>
<li>Function:</li>
</ol>


<p>If you grapsed the above, the function definition will be quite easy to understand:</p>

<p>``` erlang
% define the input variables
Var1 = erl_syntax:variable("A").
Var2 = erl_syntax:variable("B").</p>

<p>% define the Guard
Guard1 = erl_syntax:infix_expr(Var1, erl_syntax:operator("=/="), erl_syntax:integer(0)).</p>

<p>% define the function body
Body1 = erl_syntax:infix_expr(Var1, erl_syntax:operator("/"), Var2).</p>

<p>% define the first clause
Clause1 =  erl_syntax:clause([Var1,Var2],[Guard1],[Body1]).</p>

<p>% define the anonymous variable
Var3 = erl_syntax:variable("_").</p>

<p>% define the body of the second clause
Body2 =  erl_syntax:tuple([erl_syntax:atom(error),erl_syntax:atom(divsion_by_zero)]).</p>

<p>% define the second clause
Clause2 =  erl_syntax:clause([Var3, Var3],[],[Body2]).</p>

<p>% define the function
Function =  erl_syntax:function(erl_syntax:atom(divide),[Clause1,Clause2]).
FunctionForm = erl_syntax:revert(Function).
```</p>

<p>Now we just have to compile the module, load the binary and test:</p>

<p>``` erlang
15> {ok, Mod, Bin1} = compile:forms([ModForm,ExportForm, FunctionForm]).
{ok,div_test,</p>

<pre><code>&lt;&lt;70,79,82,49,0,0,2,16,66,69,65,77,65,116,111,109,0,0,0,
  55,0,0,0,5,8,100,...&gt;&gt;}
</code></pre>

<p>16> code:load_binary(Mod, [], Bin1).
{module,div_test}
17> div_test:divide(10,5).
2.0
18></p>

<p>```</p>

<p>That's all folks! Happy hacking! :-)</p>
]]></content>
  </entry>
  
</feed>
